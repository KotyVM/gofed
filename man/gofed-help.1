.TH GO2FED 1  2015-04-01
.SH NAME
gofed-apidiff,
gofed-bbo,
gofed-bitbucket2spec,
gofed-build,
gofed-check-commit,
gofed-check-deps,
gofed-gcpmaster,
gofed-ggi,
gofed-github2spec,
gofed-googlecode2spec,
gofed-help,
gofed-inspect,
gofed-lint,
gofed-pull,
gofed-push,
gofed-repo2spec,
gofed-review,
gofed-scan-deps,
gofed-scan-imports,
gofed-scan-symbols,
gofed-scratch-build,
gofed-scan-packages,
gofed-update,
gofed-version,
gofed-wizard
\- set of tools that automates the packaging process of golang development source codes
.SH SYNOPSIS
\fBgofed\fR COMMANDS [\fIARGUMENTS\fR]
.SH DESCRIPTION
.B gofed
is a set of tools providing ...
.SH COMMANDS

.PP
.B gofed apidiff
.RS 4
Compares two commits of the same upstream project or package.
.RE

.PP
.B gofed bbo
.RS 4
Buildroot overrides build for branches (all implicitly).
.RE

.PP
.B gofed bitbucket2spec PROJECT REPO COMMIT
.RS 4
Generates a spec file from the bitbucket.org repository.
.RE

.PP
.B gofed build
.RS 4
Builds Fedora branches (all implicitly).
.RE

.PP
.B gofed check-commit
.RS 4
For a given package name (or an import path) and an upstream commit checks
if the package is up-to-date with the commit.
.RE

.PP
.B gofed check-deps
.RS 4
For a given list of project dependencies in the JSON format (that is Godeps.json),
checks if all dependencies are up-to-date in the PkgDB database.
.RE

.PP
.B gofed gcpmaster
.RS 4
Cherry-picks commits from all branches to the master branch.
.RE

.PP
.B gofed ggi
.RS 4
Gets golang imports (imported packages).
.RE

.PP
.B gofed github2spec PROJECT REPO COMMIT
.RS 4
Generates a spec file from the github.com repository.
.RE

.PP
.B gofed googlecode2spec REPO REVISION
.RS 4
Generates a spec file from the code.google.com repository.
.RE

.PP
.B gofed help
.RS 4
Prints help.
.RE

.PP
.B gofed inspect
.RS 4
Inspects a decompressed tarball or a directory for test files, lists direct
directories (containing definition of golang packages),
lists provided packages (import paths).
.RE

.PP
.B gofed lint
.RS 4
Runs checks on a golang spec file. An archive with source codes is needed.
.RE

.PP
.B gofed pull
.RS 4
Pulls from branches (all implicitly).
.RE

.PP
.B gofed push
.RS 4
Pushes to branches (all implicitly).
.RE

.PP
.B gofed repo2spec
.RS 4
Generates a spec file for a general provider.
.RE

.PP
.B gofed review SPEC [--user] [--skip-koji]
.RS 4
Creates a review request for Bugzilla.
.B SPEC
is a name of a spec file (with the .spec extension)
First, it builds the spec file.
Then scratches builds the resulting srpm in koji.
After a successful build,
the srpm and spec files are uploaded to the user's Fedora account under
the public_html/reviews/spec_without_extension directory.
The srpm and spec files are copied via the scp utility, therefore you must use the ssh-copy-id utility to copy your key
to the fedarapeople.org website.
If the spec_without_extension directory does not exist, it is created.
The user is specified in the configuration file using the \fI\-\-user\fP option.
If all steps are successful, Preview Summary and Preview Description
are printed to stdout.
Followed by a link to a Review Request template.
.RE

.PP
.B gofed scan-imports
.RS 4
Searches available used and provided import paths
across golang development packages.
.RE

.PP
.B gofed scan-deps
.RS 4
Scans dependencies among golang packages.
.RE

.PP
.B gofed scan-symbols
.RS 4
Scans a directory for the go symbols.
.RE

.PP
.B gofed scratch-build
.RS 4
Scratches build of Fedora branches (all implicitly).
.RE

.PP
.B gofed update
.RS 4
Updates Fedora branches (all implicitly).
.RE

.PP
.B gofed scan-packages
.RS 4
Scans the PkgDB database for possible golang packages.
.RE

.PP
.B gofed version
.RS 4
Prints version.
.RE

.PP
.B gofed wizard
.RS 4
Runs phases of building, updating, ... at once.
.RE

.SH EXAMPLES

.SS Example 1: Comparison of two releases of a golang project

Golang project can be downloaded as a tarball.
In order to compare two releases, unpack corresponding tarballs into two
directories and run 'gofed apidiff <DIR1> <DIR2>'.

For example, to compare etcd-2.0.5 and etcd-2.0.7 (assuming their tarballs are already
unpacked), run:

.nf
	$ \fBgofed apidiff\fP etcd-2.0.5 etcd-2.0.7
.fi

The command implicitly outputs a list of packages (import paths) and all
symbols that has been changed and that break backward compatibility.

.nf
	$ \fBgofed apidiff\fP etcd-2.0.5 etcd-2.0.7
	Package: etcdserver
		-VerifyBootstrapConfig func removed
	Package: wal
		-WALv2_0_1 variable/constant removed
		-WALUnknown variable/constant removed
		-WALv0_4 variable/constant removed
		-WALNotExist variable/constant removed
		-WALv2_0Proxy variable/constant removed
		-WALv2_0 variable/constant removed
		-WalVersion type removed
		-DetectVersion func removed
.fi

When running this command with the \fI--prefix\fP option, all import paths are prefixed:

.nf
	$ \fBgofed apidiff\fP etcd-2.0.5 etcd-2.0.7 --prefix=github.com/coreos
	Package: github.com/coreos/etcdserver
		...
	Package: github.com/coreos/wal
		...
.fi

.SS Example 2: List all symbols for a golang project

To display all exported symbols of all packages of a golang project in the <DIR>
directory, run the 'gofed scansymbols -l <DIR>' command. For example:

.nf
	$ \fBgofed apidiff\fP -l etcd-2.0.5
.fi

.SH COLOPHON

Any bug reports send to jchaloup@redhat.com or to
https://github.com/ingvagabund/gofed
