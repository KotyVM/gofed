<?xml version='1.0' encoding='ASCII'?>
<project url="" commit="commit">
  <packages>
    <package importpath="github.com/docker/libtrust/testutil">
      <types/>
      <functions>
        <function name="GenerateTrustCA">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="PublicKey"/>
            </type>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="PrivateKey"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="GenerateIntermediate">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="PublicKey"/>
            </type>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="PrivateKey"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="GenerateTrustCert">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="PublicKey"/>
            </type>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="PrivateKey"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/docker/libtrust">
      <types>
        <type name="PublicKey" type="interface">
          <method name="KeyType">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="KeyID">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="Verify">
            <paramsList>
              <type type="selector">
                <prefix value="io"/>
                <item value="Reader"/>
              </type>
              <type type="ident" def="string"/>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="CryptoPublicKey">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="crypto"/>
                <item value="PublicKey"/>
              </type>
            </resultsList>
          </method>
          <method name="MarshalJSON">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="PEMBlock">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="pem"/>
                  <item value="Block"/>
                </type>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="AddExtendedField">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="interface"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="GetExtendedField">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="interface"/>
            </resultsList>
          </method>
        </type>
        <type name="PrivateKey" type="interface">
          <method name="PublicKey">
            <paramsList/>
            <resultsList>
              <type type="ident" def="PublicKey"/>
            </resultsList>
          </method>
          <method name="Sign">
            <paramsList>
              <type type="selector">
                <prefix value="io"/>
                <item value="Reader"/>
              </type>
              <type type="selector">
                <prefix value="crypto"/>
                <item value="Hash"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="string"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="CryptoPrivateKey">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="crypto"/>
                <item value="PrivateKey"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="JSONSignature">
          <field type="ident" def="string" name="payload"/>
          <field type="slice" name="signatures">
            <elmtype type="pointer">
              <type type="ident" def="jsSignature"/>
            </elmtype>
          </field>
          <field type="ident" def="string" name="indent"/>
          <field type="ident" def="int" name="formatLength"/>
          <field type="slice" name="formatTail">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="KeyType">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="KeyID">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="Verify">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="CryptoPublicKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="PublicKey"/>
            </type>
          </returnsList>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="PEMBlock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="pem"/>
                <item value="Block"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="AddExtendedField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="GetExtendedField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="interface"/>
          </returnsList>
        </function>
        <function name="PublicKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPrivateKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="PublicKey"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPrivateKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="Hash"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="CryptoPrivateKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPrivateKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="PrivateKey"/>
            </type>
          </returnsList>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPrivateKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="PEMBlock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPrivateKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="pem"/>
                <item value="Block"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="GenerateRSA2048PrivateKey">
          <recvList/>
          <paramsList/>
          <returnsList>
            <type type="ident" def="PrivateKey"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="GenerateRSA3072PrivateKey">
          <recvList/>
          <paramsList/>
          <returnsList>
            <type type="ident" def="PrivateKey"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="GenerateRSA4096PrivateKey">
          <recvList/>
          <paramsList/>
          <returnsList>
            <type type="ident" def="PrivateKey"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="LoadKeyFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="PrivateKey"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="LoadPublicKeyFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="PublicKey"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="SaveKey">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="PrivateKey"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="SavePublicKey">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="PublicKey"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="LoadKeySetFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="PublicKey"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="AddKeySetFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="PublicKey"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="FromCryptoPublicKey">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="PublicKey"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="PublicKey"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="FromCryptoPrivateKey">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="PrivateKey"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="PrivateKey"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalPublicKeyPEM">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="PublicKey"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalPublicKeyPEMBundle">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="PublicKey"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalPrivateKeyPEM">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="PrivateKey"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalPublicKeyJWK">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="PublicKey"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalPublicKeyJWKSet">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="PublicKey"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalPrivateKeyJWK">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="PrivateKey"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Payload">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JSONSignature"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JSONSignature"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="PrivateKey"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="SignWithChain">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JSONSignature"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="PrivateKey"/>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="x509"/>
                  <item value="Certificate"/>
                </type>
              </elmtype>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Verify">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JSONSignature"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="PublicKey"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="VerifyChains">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JSONSignature"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="CertPool"/>
              </type>
            </type>
          </paramsList>
          <returnsList>
            <type type="slice">
              <elmtype type="slice">
                <elmtype type="pointer">
                  <type type="selector">
                    <prefix value="x509"/>
                    <item value="Certificate"/>
                  </type>
                </elmtype>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="JWS">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JSONSignature"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="ParseJWS">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="JSONSignature"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="NewJSONSignature">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="JSONSignature"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="NewJSONSignatureFromMap">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="JSONSignature"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="ParsePrettySignature">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="JSONSignature"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="PrettySignature">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JSONSignature"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="HeaderParam">
          <recvList>
            <type type="pointer">
              <type type="ident" def="signatureAlgorithm"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="HashID">
          <recvList>
            <type type="pointer">
              <type type="ident" def="signatureAlgorithm"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="Hash"/>
            </type>
          </returnsList>
        </function>
        <function name="FilterByHosts">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="PublicKey"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="PublicKey"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="KeyType">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="CurveName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="KeyID">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="Verify">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecPublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="CryptoPublicKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="PublicKey"/>
            </type>
          </returnsList>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="PEMBlock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="pem"/>
                <item value="Block"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="AddExtendedField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecPublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="GetExtendedField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecPublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="interface"/>
          </returnsList>
        </function>
        <function name="PublicKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecPrivateKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="PublicKey"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecPrivateKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecPrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="Hash"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="CryptoPrivateKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecPrivateKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="PrivateKey"/>
            </type>
          </returnsList>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecPrivateKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="PEMBlock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecPrivateKey"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="pem"/>
                <item value="Block"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="GenerateECP256PrivateKey">
          <recvList/>
          <paramsList/>
          <returnsList>
            <type type="ident" def="PrivateKey"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="GenerateECP384PrivateKey">
          <recvList/>
          <paramsList/>
          <returnsList>
            <type type="ident" def="PrivateKey"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="GenerateECP521PrivateKey">
          <recvList/>
          <paramsList/>
          <returnsList>
            <type type="ident" def="PrivateKey"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="GenerateSelfSignedServerCert">
          <recvList/>
          <paramsList>
            <type type="ident" def="PrivateKey"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="net"/>
                <item value="IP"/>
              </elmtype>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="GenerateSelfSignedClientCert">
          <recvList/>
          <paramsList>
            <type type="ident" def="PrivateKey"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="GenerateCACert">
          <recvList/>
          <paramsList>
            <type type="ident" def="PrivateKey"/>
            <type type="ident" def="PublicKey"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="GenerateCACertPool">
          <recvList/>
          <paramsList>
            <type type="ident" def="PrivateKey"/>
            <type type="slice">
              <elmtype type="ident" def="PublicKey"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="CertPool"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="LoadCertificateBundle">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="x509"/>
                  <item value="Certificate"/>
                </type>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="LoadCertificatePool">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="CertPool"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
      </functions>
      <names>
        <name value="ErrKeyFileDoesNotExist"/>
        <name value="ErrInvalidSignContent"/>
        <name value="ErrInvalidJSONContent"/>
        <name value="ErrMissingSignatureKey"/>
      </names>
    </package>
    <package importpath="github.com/docker/libtrust/trustgraph">
      <types>
        <type type="struct" name="Statement">
          <field type="ident" def="jsonStatement" name=""/>
          <field type="pointer" name="signature">
            <type type="selector">
              <prefix value="libtrust"/>
              <item value="JSONSignature"/>
            </type>
          </field>
        </type>
        <type name="TrustGraph" type="interface">
          <method name="Verify">
            <paramsList>
              <type type="selector">
                <prefix value="libtrust"/>
                <item value="PublicKey"/>
              </type>
              <type type="ident" def="string"/>
              <type type="ident" def="uint16"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="GetGrants">
            <paramsList>
              <type type="selector">
                <prefix value="libtrust"/>
                <item value="PublicKey"/>
              </type>
              <type type="ident" def="string"/>
              <type type="ident" def="uint16"/>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="slice">
                  <elmtype type="pointer">
                    <type type="ident" def="Grant"/>
                  </elmtype>
                </elmtype>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Grant">
          <field type="ident" def="string" name="Subject"/>
          <field type="ident" def="uint16" name="Permission"/>
          <field type="ident" def="string" name="Grantee"/>
          <field type="pointer" name="statement">
            <type type="ident" def="Statement"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Grant">
          <recvList>
            <type type="pointer">
              <type type="ident" def="jsonGrant"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Statement"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="Grant"/>
            </type>
          </returnsList>
        </function>
        <function name="IsExpired">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Statement"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="bool"/>
          </returnsList>
        </function>
        <function name="Bytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Statement"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="LoadStatement">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="CertPool"/>
              </type>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="Statement"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="CreateStatement">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="selector">
              <prefix value="libtrust"/>
              <item value="PrivateKey"/>
            </type>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="x509"/>
                  <item value="Certificate"/>
                </type>
              </elmtype>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="Statement"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="statementList"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="int"/>
          </returnsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="statementList"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
          </returnsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="statementList"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="CollapseStatements">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Statement"/>
              </elmtype>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <returnsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Grant"/>
              </elmtype>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="FilterStatements">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Grant"/>
              </elmtype>
            </type>
          </paramsList>
          <returnsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Statement"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="NewMemoryGraph">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Grant"/>
              </elmtype>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="TrustGraph"/>
          </returnsList>
        </function>
        <function name="Verify">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memoryGraph"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="libtrust"/>
              <item value="PublicKey"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="uint16"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="GetGrants">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memoryGraph"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="libtrust"/>
              <item value="PublicKey"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="uint16"/>
          </paramsList>
          <returnsList>
            <type type="slice">
              <elmtype type="slice">
                <elmtype type="pointer">
                  <type type="ident" def="Grant"/>
                </elmtype>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
      </functions>
      <names/>
    </package>
  </packages>
  <imports>
    <import path="encoding/pem"/>
    <import path="reflect"/>
    <import path="testing"/>
    <import path="bytes"/>
    <import path="crypto"/>
    <import path="crypto/elliptic"/>
    <import path="crypto/x509"/>
    <import path="encoding/base32"/>
    <import path="encoding/base64"/>
    <import path="encoding/binary"/>
    <import path="errors"/>
    <import path="fmt"/>
    <import path="math/big"/>
    <import path="strings"/>
    <import path="encoding/json"/>
    <import path="log"/>
    <import path="crypto/rand"/>
    <import path="crypto/rsa"/>
    <import path="io"/>
    <import path="io/ioutil"/>
    <import path="os"/>
    <import path="crypto/ecdsa"/>
    <import path="github.com/docker/libtrust/testutil"/>
    <import path="time"/>
    <import path="unicode"/>
    <import path="crypto/sha256"/>
    <import path="crypto/sha512"/>
    <import path="path/filepath"/>
    <import path="net"/>
    <import path="path"/>
    <import path="crypto/x509/pkix"/>
    <import path="github.com/docker/libtrust"/>
    <import path="sort"/>
  </imports>
</project>
