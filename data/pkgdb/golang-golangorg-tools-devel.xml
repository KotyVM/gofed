<?xml version='1.0' encoding='ASCII'?>
<project url="" commit="commit" nvr="golang-googlecode-tools-0-3.0.hga7e14835e46b.fc23">
  <packages>
    <package importpath="golang.org/x/tools/playground">
      <types/>
      <functions/>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/godoc/analysis">
      <types>
        <type type="struct" name="TypeInfoJSON">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="int64" name="Size"/>
          <field type="ident" def="int64" name="Align"/>
          <field type="slice" name="Methods">
            <elmtype type="ident" def="anchorJSON"/>
          </field>
          <field type="slice" name="ImplGroups">
            <elmtype type="ident" def="implGroupJSON"/>
          </field>
        </type>
        <type type="struct" name="PCGNodeJSON">
          <field type="ident" def="anchorJSON" name="Func"/>
          <field type="slice" name="Callees">
            <elmtype type="ident" def="int"/>
          </field>
        </type>
        <type name="Link" type="interface">
          <method name="Start">
            <paramsList/>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
          <method name="End">
            <paramsList/>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
          <method name="Write">
            <paramsList>
              <type type="selector">
                <prefix value="io"/>
                <item value="Writer"/>
              </type>
              <type type="ident" def="int"/>
              <type type="ident" def="bool"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="FileInfo">
          <field type="slice" name="Data">
            <elmtype type="interface"/>
          </field>
          <field type="slice" name="Links">
            <elmtype type="ident" def="Link"/>
          </field>
        </type>
        <type type="struct" name="PackageInfo">
          <field type="slice" name="CallGraph">
            <elmtype type="pointer">
              <type type="ident" def="PCGNodeJSON"/>
            </elmtype>
          </field>
          <field type="map" name="CallGraphIndex">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="int"/>
          </field>
          <field type="slice" name="Types">
            <elmtype type="pointer">
              <type type="ident" def="TypeInfoJSON"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="Result">
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="ident" def="string" name="status"/>
          <field type="map" name="fileInfos">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="fileInfo"/>
            </valtype>
          </field>
          <field type="map" name="pkgInfos">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="pkgInfo"/>
            </valtype>
          </field>
        </type>
      </types>
      <functions>
        <function name="Len">
          <recvList>
            <type type="ident" def="typesByString"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="typesByString"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="typesByString"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="funcsByPos"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="funcsByPos"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="funcsByPos"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="sitesByPos"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="sitesByPos"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="sitesByPos"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="pcgNodesByPretty"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="pcgNodesByPretty"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="pcgNodesByPretty"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Start">
          <recvList>
            <type type="ident" def="aLink"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="End">
          <recvList>
            <type type="ident" def="aLink"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="ident" def="aLink"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Start">
          <recvList>
            <type type="ident" def="errorLink"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="End">
          <recvList>
            <type type="ident" def="errorLink"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="ident" def="errorLink"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Status">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="FileInfo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="FileInfo"/>
          </resultsList>
        </function>
        <function name="PackageInfo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="PackageInfo"/>
          </resultsList>
        </function>
        <function name="Run">
          <recvList/>
          <paramsList>
            <type type="ident" def="bool"/>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="linksByStart"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="linksByStart"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="linksByStart"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/dashboard/app/build">
      <types>
        <type type="struct" name="Pagination">
          <field type="ident" def="int" name="Next"/>
          <field type="ident" def="int" name="Prev"/>
          <field type="ident" def="bool" name="HasPrev"/>
        </type>
        <type type="struct" name="TagState">
          <field type="pointer" name="Tag">
            <type type="ident" def="Commit"/>
          </field>
          <field type="slice" name="Packages">
            <elmtype type="pointer">
              <type type="ident" def="PackageState"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="PackageState">
          <field type="pointer" name="Package">
            <type type="ident" def="Package"/>
          </field>
          <field type="pointer" name="Commit">
            <type type="ident" def="Commit"/>
          </field>
        </type>
        <type type="struct" name="PerfResultCache">
          <field type="selector" name="c">
            <prefix value="appengine"/>
            <item value="Context"/>
          </field>
          <field type="ident" def="bool" name="newer"/>
          <field type="pointer" name="iter">
            <type type="selector">
              <prefix value="datastore"/>
              <item value="Iterator"/>
            </type>
          </field>
          <field type="map" name="results">
            <keytype type="ident" def="int"/>
            <valtype type="pointer">
              <type type="ident" def="PerfResult"/>
            </valtype>
          </field>
        </type>
        <type type="struct" name="PerfChange">
          <field type="ident" def="string" name="Builder"/>
          <field type="ident" def="string" name="Bench"/>
          <field type="ident" def="string" name="Metric"/>
          <field type="ident" def="uint64" name="Old"/>
          <field type="ident" def="uint64" name="New"/>
          <field type="ident" def="float64" name="Diff"/>
        </type>
        <type type="struct" name="PerfChangeBenchmark">
          <field type="ident" def="string" name="Name"/>
          <field type="slice" name="Metrics">
            <elmtype type="pointer">
              <type type="ident" def="PerfChangeMetric"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="PerfChangeMetric">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="uint64" name="Old"/>
          <field type="ident" def="uint64" name="New"/>
          <field type="ident" def="float64" name="Delta"/>
        </type>
        <type name="PerfChangeBenchmarkSlice" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="PerfChangeBenchmark"/>
          </elmtype>
        </type>
        <type name="PerfChangeMetricSlice" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="PerfChangeMetric"/>
          </elmtype>
        </type>
        <type type="struct" name="Todo">
          <field type="ident" def="string" name="Kind"/>
          <field type="interface" name="Data"/>
        </type>
        <type type="struct" name="PerfRequest">
          <field type="ident" def="string" name="Builder"/>
          <field type="ident" def="string" name="Benchmark"/>
          <field type="ident" def="string" name="Hash"/>
          <field type="ident" def="bool" name="OK"/>
          <field type="slice" name="Metrics">
            <elmtype type="ident" def="PerfMetric"/>
          </field>
          <field type="slice" name="Artifacts">
            <elmtype type="ident" def="PerfArtifact"/>
          </field>
        </type>
        <type type="struct" name="PerfMetric">
          <field type="ident" def="string" name="Type"/>
          <field type="ident" def="uint64" name="Val"/>
        </type>
        <type type="struct" name="PerfArtifact">
          <field type="ident" def="string" name="Type"/>
          <field type="ident" def="string" name="Body"/>
        </type>
        <type type="struct" name="Dashboard">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Prefix"/>
          <field type="slice" name="Packages">
            <elmtype type="pointer">
              <type type="ident" def="Package"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="Package">
          <field type="ident" def="string" name="Kind"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Path"/>
          <field type="ident" def="int" name="NextNum"/>
        </type>
        <type type="struct" name="Commit">
          <field type="ident" def="string" name="PackagePath"/>
          <field type="ident" def="string" name="Hash"/>
          <field type="ident" def="string" name="ParentHash"/>
          <field type="ident" def="int" name="Num"/>
          <field type="ident" def="string" name="User"/>
          <field type="ident" def="string" name="Desc"/>
          <field type="selector" name="Time">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="bool" name="NeedsBenchmarking"/>
          <field type="ident" def="bool" name="TryPatch"/>
          <field type="slice" name="ResultData">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="PerfResults">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="bool" name="FailNotificationSent"/>
        </type>
        <type type="struct" name="CommitRun">
          <field type="ident" def="string" name="PackagePath"/>
          <field type="ident" def="int" name="StartCommitNum"/>
          <field type="slice" name="Hash">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="User">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="Desc">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="Time">
            <elmtype type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </elmtype>
          </field>
          <field type="slice" name="NeedsBenchmarking">
            <elmtype type="ident" def="bool"/>
          </field>
        </type>
        <type type="struct" name="Result">
          <field type="ident" def="string" name="PackagePath"/>
          <field type="ident" def="string" name="Builder"/>
          <field type="ident" def="string" name="Hash"/>
          <field type="ident" def="string" name="GoHash"/>
          <field type="ident" def="bool" name="OK"/>
          <field type="ident" def="string" name="Log"/>
          <field type="ident" def="string" name="LogHash"/>
          <field type="ident" def="int64" name="RunTime"/>
        </type>
        <type type="struct" name="PerfResult">
          <field type="ident" def="string" name="PackagePath"/>
          <field type="ident" def="string" name="CommitHash"/>
          <field type="ident" def="int" name="CommitNum"/>
          <field type="slice" name="Data">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="map" name="parsedData">
            <keytype type="ident" def="string"/>
            <valtype type="map">
              <keytype type="ident" def="string"/>
              <valtype type="pointer">
                <type type="ident" def="ParsedPerfResult"/>
              </valtype>
            </valtype>
          </field>
        </type>
        <type type="struct" name="ParsedPerfResult">
          <field type="ident" def="bool" name="OK"/>
          <field type="map" name="Metrics">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="uint64"/>
          </field>
          <field type="map" name="Artifacts">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="PerfMetricRun">
          <field type="ident" def="string" name="PackagePath"/>
          <field type="ident" def="string" name="Builder"/>
          <field type="ident" def="string" name="Benchmark"/>
          <field type="ident" def="string" name="Metric"/>
          <field type="ident" def="int" name="StartCommitNum"/>
          <field type="slice" name="Vals">
            <elmtype type="ident" def="int64"/>
          </field>
        </type>
        <type type="struct" name="PerfConfig">
          <field type="slice" name="BuilderBench">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="BuilderProcs">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="BenchMetric">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="NoiseLevels">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="map" name="noise">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="float64"/>
          </field>
        </type>
        <type name="MetricList" type="slice">
          <elmtype type="ident" def="string"/>
        </type>
        <type type="struct" name="PerfTodo">
          <field type="ident" def="string" name="PackagePath"/>
          <field type="ident" def="string" name="Builder"/>
          <field type="slice" name="CommitNums">
            <elmtype type="ident" def="int"/>
          </field>
        </type>
        <type type="struct" name="Log">
          <field type="slice" name="CompressedLog">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Tag">
          <field type="ident" def="string" name="Kind"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Hash"/>
        </type>
      </types>
      <functions>
        <function name="Len">
          <recvList>
            <type type="ident" def="builderOrder"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="builderOrder"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="builderOrder"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="TagStateByName">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="TagState"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="uiPerfDetailMetrics"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="uiPerfDetailMetrics"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="uiPerfDetailMetrics"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="perfChangesMetricSlice"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="perfChangesMetricSlice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="perfChangesMetricSlice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="perfChangesChangeSlice"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="perfChangesChangeSlice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="perfChangesChangeSlice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="MakePerfResultCache">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Commit"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PerfResultCache"/>
            </type>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PerfResultCache"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PerfResult"/>
            </type>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PerfResultCache"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PerfResult"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NextForComparison">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PerfResultCache"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PerfResult"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="PerfChangeBenchmarkSlice"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="PerfChangeBenchmarkSlice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="PerfChangeBenchmarkSlice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="PerfChangeMetricSlice"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="PerfChangeMetricSlice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="PerfChangeMetricSlice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="errBadMethod"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="AuthHandler">
          <recvList/>
          <paramsList>
            <type type="ident" def="dashHandler"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="Context">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Dashboard"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="datastore"/>
                <item value="Key"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="LastCommit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Commit"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetPackage">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Commit"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="datastore"/>
                <item value="Key"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Commit"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="AddResult">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Commit"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="AddPerfResult">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Commit"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Result">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Commit"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </resultsList>
        </function>
        <function name="Results">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Commit"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Result"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="ResultGoHashes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Commit"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CommitRun"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="datastore"/>
                <item value="Key"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="GetCommitRun">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CommitRun"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="AddCommit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CommitRun"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Commit"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetCommits">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Commit"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="datastore"/>
                <item value="Key"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Data">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PerfResult"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="datastore"/>
                <item value="Key"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="AddResult">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PerfResult"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="PerfRequest"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ParseData">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PerfResult"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="map">
                <keytype type="ident" def="string"/>
                <valtype type="pointer">
                  <type type="ident" def="ParsedPerfResult"/>
                </valtype>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PerfMetricRun"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="datastore"/>
                <item value="Key"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="GetPerfMetricRun">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PerfMetricRun"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="AddMetric">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PerfMetricRun"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetPerfMetricsForCommits">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint64"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PerfConfigKey">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="datastore"/>
                <item value="Key"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="GetPerfConfig">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PerfConfig"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NoiseLevel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PerfConfig"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="UpdatePerfConfig">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
            <type type="pointer">
              <type type="ident" def="PerfRequest"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="MetricList"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="MetricList"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="MetricList"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="BuildersForBenchmark">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PerfConfig"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="BenchmarksForBuilder">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PerfConfig"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="MetricsForBenchmark">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PerfConfig"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="BenchmarkProcList">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PerfConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="ProcList">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PerfConfig"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int"/>
            </type>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PerfTodo"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="datastore"/>
                <item value="Key"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="AddCommitToPerfTodo">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Commit"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Text">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Log"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PutLog">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Tag"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="datastore"/>
                <item value="Key"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Tag"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Commit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Tag"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Commit"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetTag">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Tag"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Packages">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Package"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="PerfRunLength"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/refactor/lexical">
      <types>
        <type type="struct" name="Block">
          <field type="ident" def="string" name="kind"/>
          <field type="selector" name="syntax">
            <prefix value="ast"/>
            <item value="Node"/>
          </field>
          <field type="ident" def="Environment" name="parent"/>
          <field type="slice" name="bindings">
            <elmtype type="selector">
              <prefix value="types"/>
              <item value="Object"/>
            </elmtype>
          </field>
          <field type="map" name="index">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="int"/>
          </field>
        </type>
        <type type="struct" name="Environment">
          <field type="pointer" name="block">
            <type type="ident" def="Block"/>
          </field>
          <field type="ident" def="int" name="nbindings"/>
        </type>
        <type type="struct" name="Reference">
          <field type="pointer" name="Id">
            <type type="selector">
              <prefix value="ast"/>
              <item value="Ident"/>
            </type>
          </field>
          <field type="ident" def="Environment" name="Env"/>
        </type>
        <type type="struct" name="Info">
          <field type="map" name="Defs">
            <keytype type="selector">
              <prefix value="types"/>
              <item value="Object"/>
            </keytype>
            <valtype type="pointer">
              <type type="ident" def="Block"/>
            </valtype>
          </field>
          <field type="map" name="Refs">
            <keytype type="selector">
              <prefix value="types"/>
              <item value="Object"/>
            </keytype>
            <valtype type="slice">
              <elmtype type="ident" def="Reference"/>
            </valtype>
          </field>
          <field type="map" name="Blocks">
            <keytype type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </keytype>
            <valtype type="pointer">
              <type type="ident" def="Block"/>
            </valtype>
          </field>
          <field type="pointer" name="PackageBlock">
            <type type="ident" def="Block"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Depth">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Block"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Lookup">
          <recvList>
            <type type="ident" def="Environment"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Object"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Block"/>
            </type>
          </resultsList>
        </function>
        <function name="Lookup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Block"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Object"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Block"/>
            </type>
          </resultsList>
        </function>
        <function name="Block">
          <recvList>
            <type type="ident" def="Environment"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Block"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Environment"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Block"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Structure">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="token"/>
                <item value="FileSet"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Info"/>
              </type>
            </type>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="ast"/>
                  <item value="File"/>
                </type>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Info"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/dashboard/app/cache">
      <types/>
      <functions>
        <function name="Now">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="Tick">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
            <type type="ident" def="uint64"/>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Set">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
            <type type="ident" def="uint64"/>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="TimeKey"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/astutil">
      <types/>
      <functions>
        <function name="AddImport">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="token"/>
                <item value="FileSet"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="File"/>
              </type>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="AddNamedImport">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="token"/>
                <item value="FileSet"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="File"/>
              </type>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="DeleteImport">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="token"/>
                <item value="FileSet"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="File"/>
              </type>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="RewriteImport">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="token"/>
                <item value="FileSet"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="File"/>
              </type>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="UsesImport">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="File"/>
              </type>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Visit">
          <recvList>
            <type type="ident" def="visitFn"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Visitor"/>
            </type>
          </resultsList>
        </function>
        <function name="Imports">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="token"/>
                <item value="FileSet"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="File"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="slice">
                <elmtype type="pointer">
                  <type type="selector">
                    <prefix value="ast"/>
                    <item value="ImportSpec"/>
                  </type>
                </elmtype>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="PathEnclosingInterval">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="File"/>
              </type>
            </type>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="ast"/>
                <item value="Node"/>
              </elmtype>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="ident" def="tokenNode"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="End">
          <recvList>
            <type type="ident" def="tokenNode"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byPos"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byPos"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byPos"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NodeDescription">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/godoc/util">
      <types>
        <type type="struct" name="RWValue">
          <field type="selector" name="mutex">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="interface" name="value"/>
          <field type="selector" name="timestamp">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
        </type>
        <type type="struct" name="Throttle">
          <field type="ident" def="float64" name="f"/>
          <field type="selector" name="dt">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="tr">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="ts">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="tt">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Set">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RWValue"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RWValue"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </resultsList>
        </function>
        <function name="IsText">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsTextFile">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="vfs"/>
              <item value="Opener"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewThrottle">
          <recvList/>
          <paramsList>
            <type type="ident" def="float64"/>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Throttle"/>
            </type>
          </resultsList>
        </function>
        <function name="Throttle">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Throttle"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/go/exact">
      <types>
        <type name="Kind" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type name="Value" type="interface">
          <method name="Kind">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Kind"/>
            </resultsList>
          </method>
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="implementsValue">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
      </types>
      <functions>
        <function name="Kind">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Kind"/>
          </resultsList>
        </function>
        <function name="Kind">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Kind"/>
          </resultsList>
        </function>
        <function name="Kind">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Kind"/>
          </resultsList>
        </function>
        <function name="Kind">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Kind"/>
          </resultsList>
        </function>
        <function name="Kind">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Kind"/>
          </resultsList>
        </function>
        <function name="Kind">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Kind"/>
          </resultsList>
        </function>
        <function name="Kind">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Kind"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="boolVal"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="stringVal"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="int64Val"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="intVal"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="floatVal"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="complexVal"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MakeUnknown">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="MakeBool">
          <recvList/>
          <paramsList>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="MakeString">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="MakeInt64">
          <recvList/>
          <paramsList>
            <type type="ident" def="int64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="MakeUint64">
          <recvList/>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="MakeFloat64">
          <recvList/>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="MakeFromLiteral">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="token"/>
              <item value="Token"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="BoolVal">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="StringVal">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Int64Val">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Uint64Val">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Float32Val">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="float32"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Float64Val">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="float64"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="BitLen">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Sign">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Bytes">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="MakeFromBytes">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="Num">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="Denom">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="MakeImag">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="Real">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="Imag">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="UnaryOp">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Token"/>
            </type>
            <type type="ident" def="Value"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="BinaryOp">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
            <type type="selector">
              <prefix value="token"/>
              <item value="Token"/>
            </type>
            <type type="ident" def="Value"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="Shift">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
            <type type="selector">
              <prefix value="token"/>
              <item value="Token"/>
            </type>
            <type type="ident" def="uint"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="Compare">
          <recvList/>
          <paramsList>
            <type type="ident" def="Value"/>
            <type type="selector">
              <prefix value="token"/>
              <item value="Token"/>
            </type>
            <type type="ident" def="Value"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Unknown"/>
        <name value="Bool"/>
        <name value="String"/>
        <name value="Int"/>
        <name value="Float"/>
        <name value="Complex"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/imports">
      <types>
        <type type="struct" name="Options">
          <field type="ident" def="bool" name="Fragment"/>
          <field type="ident" def="bool" name="AllErrors"/>
          <field type="ident" def="bool" name="Comments"/>
          <field type="ident" def="bool" name="TabIndent"/>
          <field type="ident" def="int" name="TabWidth"/>
        </type>
      </types>
      <functions>
        <function name="Len">
          <recvList>
            <type type="ident" def="byImportSpec"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byImportSpec"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byImportSpec"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byCommentPos"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byCommentPos"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byCommentPos"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Process">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Visit">
          <recvList>
            <type type="ident" def="visitFn"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Visitor"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/go/importer">
      <types/>
      <functions>
        <function name="ImportData">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="Package"/>
                </type>
              </valtype>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ExportData">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/godoc/vfs">
      <types>
        <type name="FileSystem" type="interface">
          <method name="Lstat">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="os"/>
                <item value="FileInfo"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Stat">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="os"/>
                <item value="FileInfo"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="ReadDir">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="selector">
                  <prefix value="os"/>
                  <item value="FileInfo"/>
                </elmtype>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type name="Opener" type="interface">
          <method name="Open">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="ReadSeekCloser"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="ReadSeekCloser" type="interface"/>
        <type name="NameSpace" type="map">
          <keytype type="ident" def="string"/>
          <valtype type="slice">
            <elmtype type="ident" def="mountedFS"/>
          </valtype>
        </type>
        <type name="BindMode" type="ident">
          <type type="ident" def="int"/>
        </type>
      </types>
      <functions>
        <function name="ReadFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="Opener"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="OS">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="FileSystem"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="osFS"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Open">
          <recvList>
            <type type="ident" def="osFS"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="ReadSeekCloser"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Lstat">
          <recvList>
            <type type="ident" def="osFS"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileInfo"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Stat">
          <recvList>
            <type type="ident" def="osFS"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileInfo"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadDir">
          <recvList>
            <type type="ident" def="osFS"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="os"/>
                <item value="FileInfo"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Fprint">
          <recvList>
            <type type="ident" def="NameSpace"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Bind">
          <recvList>
            <type type="ident" def="NameSpace"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="FileSystem"/>
            <type type="ident" def="string"/>
            <type type="ident" def="BindMode"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Open">
          <recvList>
            <type type="ident" def="NameSpace"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="ReadSeekCloser"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Stat">
          <recvList>
            <type type="ident" def="NameSpace"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileInfo"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Lstat">
          <recvList>
            <type type="ident" def="NameSpace"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileInfo"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="dirInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="ident" def="dirInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="Mode">
          <recvList>
            <type type="ident" def="dirInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileMode"/>
            </type>
          </resultsList>
        </function>
        <function name="ModTime">
          <recvList>
            <type type="ident" def="dirInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </resultsList>
        </function>
        <function name="IsDir">
          <recvList>
            <type type="ident" def="dirInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Sys">
          <recvList>
            <type type="ident" def="dirInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="ReadDir">
          <recvList>
            <type type="ident" def="NameSpace"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="os"/>
                <item value="FileInfo"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byName"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="BindReplace"/>
        <name value="BindBefore"/>
        <name value="BindAfter"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/go/types">
      <types>
        <type name="Type" type="interface">
          <method name="Underlying">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Type"/>
            </resultsList>
          </method>
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type name="BasicKind" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type name="BasicInfo" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="Basic">
          <field type="ident" def="BasicKind" name="kind"/>
          <field type="ident" def="BasicInfo" name="info"/>
          <field type="ident" def="string" name="name"/>
        </type>
        <type type="struct" name="Array">
          <field type="ident" def="int64" name="len"/>
          <field type="ident" def="Type" name="elem"/>
        </type>
        <type type="struct" name="Slice">
          <field type="ident" def="Type" name="elem"/>
        </type>
        <type type="struct" name="Struct">
          <field type="slice" name="fields">
            <elmtype type="pointer">
              <type type="ident" def="Var"/>
            </elmtype>
          </field>
          <field type="slice" name="tags">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="offsets">
            <elmtype type="ident" def="int64"/>
          </field>
        </type>
        <type type="struct" name="Pointer">
          <field type="ident" def="Type" name="base"/>
        </type>
        <type type="struct" name="Tuple">
          <field type="slice" name="vars">
            <elmtype type="pointer">
              <type type="ident" def="Var"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="Signature">
          <field type="pointer" name="scope">
            <type type="ident" def="Scope"/>
          </field>
          <field type="pointer" name="recv">
            <type type="ident" def="Var"/>
          </field>
          <field type="pointer" name="params">
            <type type="ident" def="Tuple"/>
          </field>
          <field type="pointer" name="results">
            <type type="ident" def="Tuple"/>
          </field>
          <field type="ident" def="bool" name="variadic"/>
        </type>
        <type type="struct" name="Interface">
          <field type="slice" name="methods">
            <elmtype type="pointer">
              <type type="ident" def="Func"/>
            </elmtype>
          </field>
          <field type="slice" name="embeddeds">
            <elmtype type="pointer">
              <type type="ident" def="Named"/>
            </elmtype>
          </field>
          <field type="slice" name="allMethods">
            <elmtype type="pointer">
              <type type="ident" def="Func"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="Map">
          <field type="ident" def="Type" name="key"/>
          <field type="ident" def="Type" name="elem"/>
        </type>
        <type type="struct" name="Chan">
          <field type="ident" def="ChanDir" name="dir"/>
          <field type="ident" def="Type" name="elem"/>
        </type>
        <type name="ChanDir" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="Named">
          <field type="pointer" name="obj">
            <type type="ident" def="TypeName"/>
          </field>
          <field type="ident" def="Type" name="underlying"/>
          <field type="slice" name="methods">
            <elmtype type="pointer">
              <type type="ident" def="Func"/>
            </elmtype>
          </field>
        </type>
        <type name="Sizes" type="interface">
          <method name="Alignof">
            <paramsList>
              <type type="ident" def="Type"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="int64"/>
            </resultsList>
          </method>
          <method name="Offsetsof">
            <paramsList>
              <type type="slice">
                <elmtype type="pointer">
                  <type type="ident" def="Var"/>
                </elmtype>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="int64"/>
              </type>
            </resultsList>
          </method>
          <method name="Sizeof">
            <paramsList>
              <type type="ident" def="Type"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="int64"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="StdSizes">
          <field type="ident" def="int64" name="WordSize"/>
          <field type="ident" def="int64" name="MaxAlign"/>
        </type>
        <type name="SelectionKind" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="Selection">
          <field type="ident" def="SelectionKind" name="kind"/>
          <field type="ident" def="Type" name="recv"/>
          <field type="ident" def="Object" name="obj"/>
          <field type="slice" name="index">
            <elmtype type="ident" def="int"/>
          </field>
          <field type="ident" def="bool" name="indirect"/>
        </type>
        <type type="struct" name="Scope">
          <field type="pointer" name="parent">
            <type type="ident" def="Scope"/>
          </field>
          <field type="slice" name="children">
            <elmtype type="pointer">
              <type type="ident" def="Scope"/>
            </elmtype>
          </field>
          <field type="ident" def="string" name="comment"/>
          <field type="map" name="elems">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="Object"/>
          </field>
        </type>
        <type type="struct" name="Package">
          <field type="ident" def="string" name="path"/>
          <field type="ident" def="string" name="name"/>
          <field type="pointer" name="scope">
            <type type="ident" def="Scope"/>
          </field>
          <field type="ident" def="bool" name="complete"/>
          <field type="slice" name="imports">
            <elmtype type="pointer">
              <type type="ident" def="Package"/>
            </elmtype>
          </field>
          <field type="ident" def="bool" name="fake"/>
        </type>
        <type name="Object" type="interface">
          <method name="Parent">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Scope"/>
              </type>
            </resultsList>
          </method>
          <method name="Pos">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="token"/>
                <item value="Pos"/>
              </type>
            </resultsList>
          </method>
          <method name="Pkg">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Package"/>
              </type>
            </resultsList>
          </method>
          <method name="Name">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="Type">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Type"/>
            </resultsList>
          </method>
          <method name="Exported">
            <paramsList/>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Id">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="order">
            <paramsList/>
            <resultsList>
              <type type="ident" def="uint32"/>
            </resultsList>
          </method>
          <method name="setOrder">
            <paramsList>
              <type type="ident" def="uint32"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="setParent">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="Scope"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="sameId">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="Package"/>
              </type>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="PkgName">
          <field type="ident" def="object" name=""/>
          <field type="pointer" name="imported">
            <type type="ident" def="Package"/>
          </field>
          <field type="ident" def="bool" name="used"/>
        </type>
        <type type="struct" name="Const">
          <field type="ident" def="object" name=""/>
          <field type="selector" name="val">
            <prefix value="exact"/>
            <item value="Value"/>
          </field>
          <field type="ident" def="bool" name="visited"/>
        </type>
        <type type="struct" name="TypeName">
          <field type="ident" def="object" name=""/>
        </type>
        <type type="struct" name="Var">
          <field type="ident" def="object" name=""/>
          <field type="ident" def="bool" name="anonymous"/>
          <field type="ident" def="bool" name="visited"/>
          <field type="ident" def="bool" name="isField"/>
          <field type="ident" def="bool" name="used"/>
        </type>
        <type type="struct" name="Func">
          <field type="ident" def="object" name=""/>
        </type>
        <type type="struct" name="Label">
          <field type="ident" def="object" name=""/>
          <field type="ident" def="bool" name="used"/>
        </type>
        <type type="struct" name="Builtin">
          <field type="ident" def="object" name=""/>
          <field type="ident" def="builtinId" name="id"/>
        </type>
        <type type="struct" name="Nil">
          <field type="ident" def="object" name=""/>
        </type>
        <type type="struct" name="MethodSetCache">
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="map" name="named">
            <keytype type="pointer">
              <type type="ident" def="Named"/>
            </keytype>
            <valtype type="struct" name="">
              <field type="pointer" name="value">
                <type type="ident" def="MethodSet"/>
              </field>
              <field type="pointer" name="pointer">
                <type type="ident" def="MethodSet"/>
              </field>
            </valtype>
          </field>
          <field type="map" name="others">
            <keytype type="ident" def="Type"/>
            <valtype type="pointer">
              <type type="ident" def="MethodSet"/>
            </valtype>
          </field>
        </type>
        <type type="struct" name="MethodSet">
          <field type="slice" name="list">
            <elmtype type="pointer">
              <type type="ident" def="Selection"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="Checker">
          <field type="pointer" name="conf">
            <type type="ident" def="Config"/>
          </field>
          <field type="pointer" name="fset">
            <type type="selector">
              <prefix value="token"/>
              <item value="FileSet"/>
            </type>
          </field>
          <field type="pointer" name="pkg">
            <type type="ident" def="Package"/>
          </field>
          <field type="pointer" name="">
            <type type="ident" def="Info"/>
          </field>
          <field type="map" name="objMap">
            <keytype type="ident" def="Object"/>
            <valtype type="pointer">
              <type type="ident" def="declInfo"/>
            </valtype>
          </field>
          <field type="slice" name="files">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="File"/>
              </type>
            </elmtype>
          </field>
          <field type="map" name="unusedDotImports">
            <keytype type="pointer">
              <type type="ident" def="Scope"/>
            </keytype>
            <valtype type="map">
              <keytype type="pointer">
                <type type="ident" def="Package"/>
              </keytype>
              <valtype type="selector">
                <prefix value="token"/>
                <item value="Pos"/>
              </valtype>
            </valtype>
          </field>
          <field type="ident" def="error" name="firstErr"/>
          <field type="map" name="methods">
            <keytype type="ident" def="string"/>
            <valtype type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Func"/>
              </elmtype>
            </valtype>
          </field>
          <field type="map" name="untyped">
            <keytype type="selector">
              <prefix value="ast"/>
              <item value="Expr"/>
            </keytype>
            <valtype type="ident" def="exprInfo"/>
          </field>
          <field type="slice" name="funcs">
            <elmtype type="ident" def="funcInfo"/>
          </field>
          <field type="slice" name="delayed">
            <elmtype type="func">
              <paramsList/>
              <resultsList/>
            </elmtype>
          </field>
          <field type="ident" def="context" name=""/>
          <field type="ident" def="int" name="indent"/>
        </type>
        <type type="struct" name="Error">
          <field type="pointer" name="Fset">
            <type type="selector">
              <prefix value="token"/>
              <item value="FileSet"/>
            </type>
          </field>
          <field type="selector" name="Pos">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
          <field type="ident" def="string" name="Msg"/>
          <field type="ident" def="bool" name="Soft"/>
        </type>
        <type name="Importer" type="func">
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="pointer">
                <type type="ident" def="Package"/>
              </valtype>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </type>
        <type type="struct" name="Config">
          <field type="ident" def="bool" name="IgnoreFuncBodies"/>
          <field type="ident" def="bool" name="FakeImportC"/>
          <field type="map" name="Packages">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="Package"/>
            </valtype>
          </field>
          <field type="func" name="Error">
            <paramsList>
              <type type="ident" def="error"/>
            </paramsList>
            <resultsList/>
          </field>
          <field type="ident" def="Importer" name="Import"/>
          <field type="ident" def="Sizes" name="Sizes"/>
        </type>
        <type type="struct" name="Info">
          <field type="map" name="Types">
            <keytype type="selector">
              <prefix value="ast"/>
              <item value="Expr"/>
            </keytype>
            <valtype type="ident" def="TypeAndValue"/>
          </field>
          <field type="map" name="Defs">
            <keytype type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="Ident"/>
              </type>
            </keytype>
            <valtype type="ident" def="Object"/>
          </field>
          <field type="map" name="Uses">
            <keytype type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="Ident"/>
              </type>
            </keytype>
            <valtype type="ident" def="Object"/>
          </field>
          <field type="map" name="Implicits">
            <keytype type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </keytype>
            <valtype type="ident" def="Object"/>
          </field>
          <field type="map" name="Selections">
            <keytype type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="SelectorExpr"/>
              </type>
            </keytype>
            <valtype type="pointer">
              <type type="ident" def="Selection"/>
            </valtype>
          </field>
          <field type="map" name="Scopes">
            <keytype type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </keytype>
            <valtype type="pointer">
              <type type="ident" def="Scope"/>
            </valtype>
          </field>
          <field type="slice" name="InitOrder">
            <elmtype type="pointer">
              <type type="ident" def="Initializer"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="TypeAndValue">
          <field type="ident" def="operandMode" name="mode"/>
          <field type="ident" def="Type" name="Type"/>
          <field type="selector" name="Value">
            <prefix value="exact"/>
            <item value="Value"/>
          </field>
        </type>
        <type type="struct" name="Initializer">
          <field type="slice" name="Lhs">
            <elmtype type="pointer">
              <type type="ident" def="Var"/>
            </elmtype>
          </field>
          <field type="selector" name="Rhs">
            <prefix value="ast"/>
            <item value="Expr"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="DefPredeclaredTestFuncs">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byUniqueTypeName"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byUniqueTypeName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byUniqueTypeName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byUniqueMethodName"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byUniqueMethodName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byUniqueMethodName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="TypeString">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="WriteType">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="bytes"/>
                <item value="Buffer"/>
              </type>
            </type>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="WriteSignature">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="bytes"/>
                <item value="Buffer"/>
              </type>
            </type>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Kind">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Basic"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="BasicKind"/>
          </resultsList>
        </function>
        <function name="Info">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Basic"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="BasicInfo"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Basic"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewArray">
          <recvList/>
          <paramsList>
            <type type="ident" def="Type"/>
            <type type="ident" def="int64"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Array"/>
            </type>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Array"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="Elem">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Array"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="NewSlice">
          <recvList/>
          <paramsList>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Slice"/>
            </type>
          </resultsList>
        </function>
        <function name="Elem">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Slice"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="NewStruct">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Var"/>
              </elmtype>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Struct"/>
            </type>
          </resultsList>
        </function>
        <function name="NumFields">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Struct"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Field">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Struct"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Var"/>
            </type>
          </resultsList>
        </function>
        <function name="Tag">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Struct"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewPointer">
          <recvList/>
          <paramsList>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Pointer"/>
            </type>
          </resultsList>
        </function>
        <function name="Elem">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Pointer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="NewTuple">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="pointer">
                <type type="ident" def="Var"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Tuple"/>
            </type>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Tuple"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="At">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Tuple"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Var"/>
            </type>
          </resultsList>
        </function>
        <function name="NewSignature">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Var"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Tuple"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Tuple"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </resultsList>
        </function>
        <function name="Recv">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Var"/>
            </type>
          </resultsList>
        </function>
        <function name="Params">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Tuple"/>
            </type>
          </resultsList>
        </function>
        <function name="Results">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Tuple"/>
            </type>
          </resultsList>
        </function>
        <function name="Variadic">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewInterface">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Func"/>
              </elmtype>
            </type>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Named"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
          </resultsList>
        </function>
        <function name="NumExplicitMethods">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="ExplicitMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Func"/>
            </type>
          </resultsList>
        </function>
        <function name="NumEmbeddeds">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Embedded">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Named"/>
            </type>
          </resultsList>
        </function>
        <function name="NumMethods">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Method">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Func"/>
            </type>
          </resultsList>
        </function>
        <function name="Empty">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Complete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
          </resultsList>
        </function>
        <function name="NewMap">
          <recvList/>
          <paramsList>
            <type type="ident" def="Type"/>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Map"/>
            </type>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Map"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="Elem">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Map"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="NewChan">
          <recvList/>
          <paramsList>
            <type type="ident" def="ChanDir"/>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Chan"/>
            </type>
          </resultsList>
        </function>
        <function name="Dir">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Chan"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ChanDir"/>
          </resultsList>
        </function>
        <function name="Elem">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Chan"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="NewNamed">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="TypeName"/>
            </type>
            <type type="ident" def="Type"/>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Func"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Named"/>
            </type>
          </resultsList>
        </function>
        <function name="Obj">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Named"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="TypeName"/>
            </type>
          </resultsList>
        </function>
        <function name="NumMethods">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Named"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Method">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Named"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Func"/>
            </type>
          </resultsList>
        </function>
        <function name="SetUnderlying">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Named"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AddMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Named"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Func"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Underlying">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Basic"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="Underlying">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Array"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="Underlying">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Slice"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="Underlying">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Struct"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="Underlying">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Pointer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="Underlying">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Tuple"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="Underlying">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="Underlying">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="Underlying">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Map"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="Underlying">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Chan"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="Underlying">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Named"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Basic"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Array"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Slice"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Struct"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Pointer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Tuple"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Map"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Chan"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Named"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Alignof">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StdSizes"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="Offsetsof">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StdSizes"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Var"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int64"/>
            </type>
          </resultsList>
        </function>
        <function name="Sizeof">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StdSizes"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="Kind">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Selection"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="SelectionKind"/>
          </resultsList>
        </function>
        <function name="Recv">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Selection"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="Obj">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Selection"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Object"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Selection"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="Index">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Selection"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int"/>
            </type>
          </resultsList>
        </function>
        <function name="Indirect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Selection"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Selection"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="SelectionString">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Selection"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewScope">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </resultsList>
        </function>
        <function name="Parent">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Names">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="NumChildren">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Child">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </resultsList>
        </function>
        <function name="Lookup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Object"/>
          </resultsList>
        </function>
        <function name="LookupParent">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
            <type type="ident" def="Object"/>
          </resultsList>
        </function>
        <function name="Insert">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Object"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Object"/>
          </resultsList>
        </function>
        <function name="WriteTo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Comparable">
          <recvList/>
          <paramsList>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Identical">
          <recvList/>
          <paramsList>
            <type type="ident" def="Type"/>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewPackage">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </resultsList>
        </function>
        <function name="Path">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Scope">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </resultsList>
        </function>
        <function name="Complete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="MarkComplete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Imports">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Package"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="SetImports">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Package"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="inSourceOrder"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="inSourceOrder"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="inSourceOrder"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="operand"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Id">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Parent">
          <recvList>
            <type type="pointer">
              <type type="ident" def="object"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="object"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Pkg">
          <recvList>
            <type type="pointer">
              <type type="ident" def="object"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="pointer">
              <type type="ident" def="object"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="object"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="Exported">
          <recvList>
            <type type="pointer">
              <type type="ident" def="object"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Id">
          <recvList>
            <type type="pointer">
              <type type="ident" def="object"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="object"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewPkgName">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PkgName"/>
            </type>
          </resultsList>
        </function>
        <function name="Imported">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PkgName"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </resultsList>
        </function>
        <function name="NewConst">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="Type"/>
            <type type="selector">
              <prefix value="exact"/>
              <item value="Value"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </resultsList>
        </function>
        <function name="Val">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="exact"/>
              <item value="Value"/>
            </type>
          </resultsList>
        </function>
        <function name="NewTypeName">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="TypeName"/>
            </type>
          </resultsList>
        </function>
        <function name="NewVar">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Var"/>
            </type>
          </resultsList>
        </function>
        <function name="NewParam">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Var"/>
            </type>
          </resultsList>
        </function>
        <function name="NewField">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="Type"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Var"/>
            </type>
          </resultsList>
        </function>
        <function name="Anonymous">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Var"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Var"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewFunc">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Func"/>
            </type>
          </resultsList>
        </function>
        <function name="FullName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Func"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Scope">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Func"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </resultsList>
        </function>
        <function name="NewLabel">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Label"/>
            </type>
          </resultsList>
        </function>
        <function name="ObjectString">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="Object"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PkgName"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TypeName"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Var"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Func"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Label"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Builtin"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Nil"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MethodSet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MethodSetCache"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="MethodSet"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MethodSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MethodSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="At">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MethodSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Selection"/>
            </type>
          </resultsList>
        </function>
        <function name="Lookup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MethodSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Selection"/>
            </type>
          </resultsList>
        </function>
        <function name="NewMethodSet">
          <recvList/>
          <paramsList>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="MethodSet"/>
            </type>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byUniqueName"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byUniqueName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byUniqueName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="LookupFieldOrMethod">
          <recvList/>
          <paramsList>
            <type type="ident" def="Type"/>
            <type type="ident" def="bool"/>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Object"/>
            <type type="slice">
              <elmtype type="ident" def="int"/>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="MissingMethod">
          <recvList/>
          <paramsList>
            <type type="ident" def="Type"/>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Func"/>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="nodeQueue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="nodeQueue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="nodeQueue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Push">
          <recvList>
            <type type="pointer">
              <type type="ident" def="nodeQueue"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Pop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="nodeQueue"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="ExprString">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Expr"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="WriteExpr">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="bytes"/>
                <item value="Buffer"/>
              </type>
            </type>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Expr"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="Eval">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Type"/>
            <type type="selector">
              <prefix value="exact"/>
              <item value="Value"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EvalNode">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="token"/>
                <item value="FileSet"/>
              </type>
            </type>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Expr"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Scope"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Type"/>
            <type type="selector">
              <prefix value="exact"/>
              <item value="Value"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewChecker">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="token"/>
                <item value="FileSet"/>
              </type>
            </type>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Info"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Checker"/>
            </type>
          </resultsList>
        </function>
        <function name="Files">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Checker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="ast"/>
                  <item value="File"/>
                </type>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="token"/>
                <item value="FileSet"/>
              </type>
            </type>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="ast"/>
                  <item value="File"/>
                </type>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="Error"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="TypeOf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Info"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Expr"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Type"/>
          </resultsList>
        </function>
        <function name="ObjectOf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Info"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="Ident"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Object"/>
          </resultsList>
        </function>
        <function name="IsVoid">
          <recvList>
            <type type="ident" def="TypeAndValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsType">
          <recvList>
            <type type="ident" def="TypeAndValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsBuiltin">
          <recvList>
            <type type="ident" def="TypeAndValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsValue">
          <recvList>
            <type type="ident" def="TypeAndValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsNil">
          <recvList>
            <type type="ident" def="TypeAndValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Addressable">
          <recvList>
            <type type="ident" def="TypeAndValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Assignable">
          <recvList>
            <type type="ident" def="TypeAndValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="HasOk">
          <recvList>
            <type type="ident" def="TypeAndValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Initializer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="token"/>
                <item value="FileSet"/>
              </type>
            </type>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="ast"/>
                  <item value="File"/>
                </type>
              </elmtype>
            </type>
            <type type="pointer">
              <type type="ident" def="Info"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="AssertableTo">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="AssignableTo">
          <recvList/>
          <paramsList>
            <type type="ident" def="Type"/>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ConvertibleTo">
          <recvList/>
          <paramsList>
            <type type="ident" def="Type"/>
            <type type="ident" def="Type"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Implements">
          <recvList/>
          <paramsList>
            <type type="ident" def="Type"/>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Universe"/>
        <name value="Unsafe"/>
        <name value="UniverseByte"/>
        <name value="UniverseRune"/>
        <name value="Typ"/>
        <name value="GcCompatibilityMode"/>
        <name value="Invalid"/>
        <name value="Bool"/>
        <name value="Int"/>
        <name value="Int8"/>
        <name value="Int16"/>
        <name value="Int32"/>
        <name value="Int64"/>
        <name value="Uint"/>
        <name value="Uint8"/>
        <name value="Uint16"/>
        <name value="Uint32"/>
        <name value="Uint64"/>
        <name value="Uintptr"/>
        <name value="Float32"/>
        <name value="Float64"/>
        <name value="Complex64"/>
        <name value="Complex128"/>
        <name value="String"/>
        <name value="UnsafePointer"/>
        <name value="UntypedBool"/>
        <name value="UntypedInt"/>
        <name value="UntypedRune"/>
        <name value="UntypedFloat"/>
        <name value="UntypedComplex"/>
        <name value="UntypedString"/>
        <name value="UntypedNil"/>
        <name value="Byte"/>
        <name value="Rune"/>
        <name value="IsBoolean"/>
        <name value="IsInteger"/>
        <name value="IsUnsigned"/>
        <name value="IsFloat"/>
        <name value="IsComplex"/>
        <name value="IsString"/>
        <name value="IsUntyped"/>
        <name value="IsOrdered"/>
        <name value="IsNumeric"/>
        <name value="IsConstType"/>
        <name value="SendRecv"/>
        <name value="SendOnly"/>
        <name value="RecvOnly"/>
        <name value="FieldVal"/>
        <name value="MethodVal"/>
        <name value="MethodExpr"/>
        <name value="DefaultImport"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/godoc/static">
      <types/>
      <functions/>
      <names>
        <name value="Files"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/go/gcimporter">
      <types/>
      <functions>
        <function name="FindPkg">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ImportData">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="Package"/>
                </type>
              </valtype>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Import">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="Package"/>
                </type>
              </valtype>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="importError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="FindExportData">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="bufio"/>
                <item value="Reader"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/present">
      <types>
        <type name="ParseFunc" type="func">
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Context"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Elem"/>
            <type type="ident" def="error"/>
          </resultsList>
        </type>
        <type type="struct" name="Doc">
          <field type="ident" def="string" name="Title"/>
          <field type="ident" def="string" name="Subtitle"/>
          <field type="selector" name="Time">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="slice" name="Authors">
            <elmtype type="ident" def="Author"/>
          </field>
          <field type="slice" name="Sections">
            <elmtype type="ident" def="Section"/>
          </field>
          <field type="slice" name="Tags">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="Author">
          <field type="slice" name="Elem">
            <elmtype type="ident" def="Elem"/>
          </field>
        </type>
        <type type="struct" name="Section">
          <field type="slice" name="Number">
            <elmtype type="ident" def="int"/>
          </field>
          <field type="ident" def="string" name="Title"/>
          <field type="slice" name="Elem">
            <elmtype type="ident" def="Elem"/>
          </field>
        </type>
        <type name="Elem" type="interface">
          <method name="TemplateName">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Text">
          <field type="slice" name="Lines">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="bool" name="Pre"/>
        </type>
        <type type="struct" name="List">
          <field type="slice" name="Bullet">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="Lines">
          <field type="ident" def="int" name="line"/>
          <field type="slice" name="text">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="Context">
          <field type="func" name="ReadFile">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </field>
        </type>
        <type name="ParseMode" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="Link">
          <field type="pointer" name="URL">
            <type type="selector">
              <prefix value="url"/>
              <item value="URL"/>
            </type>
          </field>
          <field type="ident" def="string" name="Label"/>
        </type>
        <type type="struct" name="Image">
          <field type="ident" def="string" name="URL"/>
          <field type="ident" def="int" name="Width"/>
          <field type="ident" def="int" name="Height"/>
        </type>
        <type type="struct" name="Iframe">
          <field type="ident" def="string" name="URL"/>
          <field type="ident" def="int" name="Width"/>
          <field type="ident" def="int" name="Height"/>
        </type>
        <type type="struct" name="HTML">
          <field type="selector" name="">
            <prefix value="template"/>
            <item value="HTML"/>
          </field>
        </type>
        <type type="struct" name="Code">
          <field type="selector" name="Text">
            <prefix value="template"/>
            <item value="HTML"/>
          </field>
          <field type="ident" def="bool" name="Play"/>
          <field type="ident" def="string" name="FileName"/>
          <field type="ident" def="string" name="Ext"/>
          <field type="slice" name="Raw">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Caption">
          <field type="ident" def="string" name="Text"/>
        </type>
      </types>
      <functions>
        <function name="Style">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="template"/>
              <item value="HTML"/>
            </type>
          </resultsList>
        </function>
        <function name="Template">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="template"/>
                <item value="Template"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Render">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Doc"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="template"/>
                <item value="Template"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Render">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Section"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="template"/>
                <item value="Template"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Register">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="ParseFunc"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="TextElem">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Author"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Elem"/>
            </type>
          </resultsList>
        </function>
        <function name="Sections">
          <recvList>
            <type type="ident" def="Section"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Section"/>
            </type>
          </resultsList>
        </function>
        <function name="Level">
          <recvList>
            <type type="ident" def="Section"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="FormattedNumber">
          <recvList>
            <type type="ident" def="Section"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="TemplateName">
          <recvList>
            <type type="ident" def="Section"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="TemplateName">
          <recvList>
            <type type="ident" def="Text"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="TemplateName">
          <recvList>
            <type type="ident" def="List"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Parse">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Context"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="ParseMode"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Doc"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Parse">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="ParseMode"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Doc"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="TemplateName">
          <recvList>
            <type type="ident" def="Link"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="TemplateName">
          <recvList>
            <type type="ident" def="Image"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="TemplateName">
          <recvList>
            <type type="ident" def="Iframe"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="TemplateName">
          <recvList>
            <type type="ident" def="HTML"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="TemplateName">
          <recvList>
            <type type="ident" def="Code"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="TemplateName">
          <recvList>
            <type type="ident" def="Caption"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="TitlesOnly"/>
        <name value="PlayEnabled"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/godoc/vfs/httpfs">
      <types/>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="vfs"/>
              <item value="FileSystem"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="FileSystem"/>
            </type>
          </resultsList>
        </function>
        <function name="Open">
          <recvList>
            <type type="pointer">
              <type type="ident" def="httpFS"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="File"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="httpDir"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Stat">
          <recvList>
            <type type="pointer">
              <type type="ident" def="httpDir"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileInfo"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="httpDir"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="httpDir"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Readdir">
          <recvList>
            <type type="pointer">
              <type type="ident" def="httpDir"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="os"/>
                <item value="FileInfo"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Stat">
          <recvList>
            <type type="pointer">
              <type type="ident" def="httpFile"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileInfo"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Readdir">
          <recvList>
            <type type="pointer">
              <type type="ident" def="httpFile"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="os"/>
                <item value="FileInfo"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/oracle">
      <types>
        <type type="struct" name="Oracle">
          <field type="pointer" name="fset">
            <type type="selector">
              <prefix value="token"/>
              <item value="FileSet"/>
            </type>
          </field>
          <field type="pointer" name="prog">
            <type type="selector">
              <prefix value="ssa"/>
              <item value="Program"/>
            </type>
          </field>
          <field type="selector" name="ptaConfig">
            <prefix value="pointer"/>
            <item value="Config"/>
          </field>
          <field type="map" name="typeInfo">
            <keytype type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </keytype>
            <valtype type="pointer">
              <type type="selector">
                <prefix value="loader"/>
                <item value="PackageInfo"/>
              </type>
            </valtype>
          </field>
        </type>
        <type type="struct" name="QueryPos">
          <field type="pointer" name="fset">
            <type type="selector">
              <prefix value="token"/>
              <item value="FileSet"/>
            </type>
          </field>
          <field type="selector" name="start">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
          <field type="selector" name="end">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
          <field type="slice" name="path">
            <elmtype type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </elmtype>
          </field>
          <field type="ident" def="bool" name="exact"/>
          <field type="pointer" name="info">
            <type type="selector">
              <prefix value="loader"/>
              <item value="PackageInfo"/>
            </type>
          </field>
        </type>
        <type type="struct" name="Result">
          <field type="pointer" name="fset">
            <type type="selector">
              <prefix value="token"/>
              <item value="FileSet"/>
            </type>
          </field>
          <field type="ident" def="queryResult" name="q"/>
          <field type="ident" def="string" name="mode"/>
          <field type="slice" name="warnings">
            <elmtype type="selector">
              <prefix value="pointer"/>
              <item value="Warning"/>
            </elmtype>
          </field>
        </type>
      </types>
      <functions>
        <function name="Len">
          <recvList>
            <type type="ident" def="membersByPosAndString"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="membersByPosAndString"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="membersByPosAndString"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="sorterrorType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="sorterrorType"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="sorterrorType"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byNamePos"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byNamePos"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byNamePos"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byTypeString"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byTypeString"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byTypeString"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byPosAndString"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byPosAndString"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byPosAndString"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byPos"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byPos"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byPos"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="TypeString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="QueryPos"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ObjectString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="QueryPos"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Object"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="SelectionString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="QueryPos"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Selection"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Serial">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="serial"/>
                <item value="Result"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Query">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="build"/>
                <item value="Context"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="loader"/>
                <item value="Program"/>
              </type>
            </type>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Oracle"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Query">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Oracle"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="QueryPos"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ParseQueryPos">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="loader"/>
                <item value="Program"/>
              </type>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="QueryPos"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteTo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="typesByString"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="typesByString"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="typesByString"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byRef"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byRef"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byRef"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="nodesByID"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="nodesByID"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="nodesByID"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="funcsByName"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="funcsByName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="funcsByName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byFuncPos"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byFuncPos"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byFuncPos"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/oracle/testdata/src/lib">
      <types>
        <type name="Type" type="ident">
          <type type="ident" def="int"/>
        </type>
      </types>
      <functions>
        <function name="Method">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="int"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="int"/>
            </type>
          </resultsList>
        </function>
        <function name="Func">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="Const"/>
        <name value="Var"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/blog">
      <types>
        <type type="struct" name="Config">
          <field type="ident" def="string" name="ContentPath"/>
          <field type="ident" def="string" name="TemplatePath"/>
          <field type="ident" def="string" name="BaseURL"/>
          <field type="ident" def="string" name="BasePath"/>
          <field type="ident" def="string" name="GodocURL"/>
          <field type="ident" def="string" name="Hostname"/>
          <field type="ident" def="int" name="HomeArticles"/>
          <field type="ident" def="int" name="FeedArticles"/>
          <field type="ident" def="string" name="FeedTitle"/>
          <field type="ident" def="bool" name="PlayEnabled"/>
        </type>
        <type type="struct" name="Doc">
          <field type="pointer" name="">
            <type type="selector">
              <prefix value="present"/>
              <item value="Doc"/>
            </type>
          </field>
          <field type="ident" def="string" name="Permalink"/>
          <field type="ident" def="string" name="Path"/>
          <field type="selector" name="HTML">
            <prefix value="template"/>
            <item value="HTML"/>
          </field>
          <field type="slice" name="Related">
            <elmtype type="pointer">
              <type type="ident" def="Doc"/>
            </elmtype>
          </field>
          <field type="pointer" name="Newer">
            <type type="ident" def="Doc"/>
          </field>
          <field type="pointer" name="Older">
            <type type="ident" def="Doc"/>
          </field>
        </type>
        <type type="struct" name="Server">
          <field type="ident" def="Config" name="cfg"/>
          <field type="slice" name="docs">
            <elmtype type="pointer">
              <type type="ident" def="Doc"/>
            </elmtype>
          </field>
          <field type="slice" name="tags">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="map" name="docPaths">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="Doc"/>
            </valtype>
          </field>
          <field type="map" name="docTags">
            <keytype type="ident" def="string"/>
            <valtype type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Doc"/>
              </elmtype>
            </valtype>
          </field>
          <field type="struct" name="template">
            <field type="pointer" name="home">
              <type type="selector">
                <prefix value="template"/>
                <item value="Template"/>
              </type>
            </field>
            <field type="pointer" name="index">
              <type type="selector">
                <prefix value="template"/>
                <item value="Template"/>
              </type>
            </field>
            <field type="pointer" name="article">
              <type type="selector">
                <prefix value="template"/>
                <item value="Template"/>
              </type>
            </field>
            <field type="pointer" name="doc">
              <type type="selector">
                <prefix value="template"/>
                <item value="Template"/>
              </type>
            </field>
          </field>
          <field type="slice" name="atomFeed">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="jsonFeed">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="selector" name="content">
            <prefix value="http"/>
            <item value="Handler"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewServer">
          <recvList/>
          <paramsList>
            <type type="ident" def="Config"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ServeHTTP">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="docsByTime"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="docsByTime"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="docsByTime"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/godoc/redirect">
      <types/>
      <functions>
        <function name="Register">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="ServeMux"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Handler">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="Handler"/>
            </type>
          </resultsList>
        </function>
        <function name="PrefixHandler">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="Handler"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/go/loader">
      <types>
        <type type="struct" name="Config">
          <field type="pointer" name="Fset">
            <type type="selector">
              <prefix value="token"/>
              <item value="FileSet"/>
            </type>
          </field>
          <field type="selector" name="ParserMode">
            <prefix value="parser"/>
            <item value="Mode"/>
          </field>
          <field type="selector" name="TypeChecker">
            <prefix value="types"/>
            <item value="Config"/>
          </field>
          <field type="func" name="TypeCheckFuncBodies">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </field>
          <field type="ident" def="bool" name="SourceImports"/>
          <field type="pointer" name="Build">
            <type type="selector">
              <prefix value="build"/>
              <item value="Context"/>
            </type>
          </field>
          <field type="func" name="DisplayPath">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </field>
          <field type="ident" def="bool" name="AllowErrors"/>
          <field type="slice" name="CreatePkgs">
            <elmtype type="ident" def="CreatePkg"/>
          </field>
          <field type="map" name="ImportPkgs">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="bool"/>
          </field>
        </type>
        <type type="struct" name="CreatePkg">
          <field type="ident" def="string" name="Path"/>
          <field type="slice" name="Files">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="File"/>
              </type>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="Program">
          <field type="pointer" name="Fset">
            <type type="selector">
              <prefix value="token"/>
              <item value="FileSet"/>
            </type>
          </field>
          <field type="slice" name="Created">
            <elmtype type="pointer">
              <type type="ident" def="PackageInfo"/>
            </elmtype>
          </field>
          <field type="map" name="Imported">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="PackageInfo"/>
            </valtype>
          </field>
          <field type="map" name="ImportMap">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </valtype>
          </field>
          <field type="map" name="AllPackages">
            <keytype type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </keytype>
            <valtype type="pointer">
              <type type="ident" def="PackageInfo"/>
            </valtype>
          </field>
        </type>
        <type type="struct" name="PackageInfo">
          <field type="pointer" name="Pkg">
            <type type="selector">
              <prefix value="types"/>
              <item value="Package"/>
            </type>
          </field>
          <field type="ident" def="bool" name="Importable"/>
          <field type="ident" def="bool" name="TransitivelyErrorFree"/>
          <field type="slice" name="Files">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="File"/>
              </type>
            </elmtype>
          </field>
          <field type="slice" name="Errors">
            <elmtype type="ident" def="error"/>
          </field>
          <field type="selector" name="">
            <prefix value="types"/>
            <item value="Info"/>
          </field>
          <field type="pointer" name="checker">
            <type type="selector">
              <prefix value="types"/>
              <item value="Checker"/>
            </type>
          </field>
          <field type="func" name="errorFunc">
            <paramsList>
              <type type="ident" def="error"/>
            </paramsList>
            <resultsList/>
          </field>
        </type>
      </types>
      <functions>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PackageInfo"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ParseFile">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="File"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FromArgs">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CreateFromFilenames">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CreateFromFiles">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="pointer">
                <type type="selector">
                  <prefix value="ast"/>
                  <item value="File"/>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ImportWithTests">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Import">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PathEnclosingInterval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PackageInfo"/>
            </type>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="ast"/>
                <item value="Node"/>
              </elmtype>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="InitialPackages">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="PackageInfo"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Load">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="FromArgsUsage"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/go/types/typeutil">
      <types>
        <type type="struct" name="Map">
          <field type="ident" def="Hasher" name="hasher"/>
          <field type="map" name="table">
            <keytype type="ident" def="uint32"/>
            <valtype type="slice">
              <elmtype type="ident" def="entry"/>
            </valtype>
          </field>
          <field type="ident" def="int" name="length"/>
        </type>
        <type type="struct" name="Hasher">
          <field type="map" name="memo">
            <keytype type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </keytype>
            <valtype type="ident" def="uint32"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="IntuitiveMethodSet">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="MethodSetCache"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="Selection"/>
                </type>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="SetHasher">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Map"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Hasher"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Map"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="At">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Map"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="Set">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Map"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Map"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Iterate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Map"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="selector">
                  <prefix value="types"/>
                  <item value="Type"/>
                </type>
                <type type="interface"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Keys">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Map"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="types"/>
                <item value="Type"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Map"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="KeysString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Map"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MakeHasher">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Hasher"/>
          </resultsList>
        </function>
        <function name="Hash">
          <recvList>
            <type type="ident" def="Hasher"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="Dependencies">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="Package"/>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="Package"/>
                </type>
              </elmtype>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/go/callgraph/rta">
      <types>
        <type type="struct" name="Result">
          <field type="pointer" name="CallGraph">
            <type type="selector">
              <prefix value="callgraph"/>
              <item value="Graph"/>
            </type>
          </field>
          <field type="map" name="Reachable">
            <keytype type="pointer">
              <type type="selector">
                <prefix value="ssa"/>
                <item value="Function"/>
              </type>
            </keytype>
            <valtype type="struct" name="">
              <field type="ident" def="bool" name="AddrTaken"/>
            </valtype>
          </field>
          <field type="selector" name="RuntimeTypes">
            <prefix value="typeutil"/>
            <item value="Map"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Analyze">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="ssa"/>
                  <item value="Function"/>
                </type>
              </elmtype>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/refactor/rename">
      <types/>
      <functions>
        <function name="Main">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="build"/>
                <item value="Context"/>
              </type>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="FromFlagUsage"/>
        <name value="Force"/>
        <name value="DryRun"/>
        <name value="ConflictError"/>
        <name value="Verbose"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/go/gccgoimporter">
      <types>
        <type type="struct" name="PackageInit">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="InitFunc"/>
          <field type="ident" def="int" name="Priority"/>
        </type>
        <type type="struct" name="InitData">
          <field type="ident" def="int" name="Priority"/>
          <field type="slice" name="Inits">
            <elmtype type="ident" def="PackageInit"/>
          </field>
        </type>
        <type type="struct" name="GccgoInstallation">
          <field type="ident" def="string" name="GccVersion"/>
          <field type="ident" def="string" name="TargetTriple"/>
          <field type="slice" name="LibPaths">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Error">
          <recvList>
            <type type="ident" def="importError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetImporter">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="map">
              <keytype type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="Package"/>
                </type>
              </keytype>
              <valtype type="ident" def="InitData"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Importer"/>
            </type>
          </resultsList>
        </function>
        <function name="InitFromDriver">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GccgoInstallation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SearchPaths">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GccgoInstallation"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="GetImporter">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GccgoInstallation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="map">
              <keytype type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="Package"/>
                </type>
              </keytype>
              <valtype type="ident" def="InitData"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Importer"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/godoc">
      <types>
        <type name="SpotInfo" type="ident">
          <type type="ident" def="uint32"/>
        </type>
        <type name="SpotKind" type="ident">
          <type type="ident" def="uint32"/>
        </type>
        <type type="struct" name="Snippet">
          <field type="ident" def="int" name="Line"/>
          <field type="ident" def="string" name="Text"/>
        </type>
        <type name="PageInfoMode" type="ident">
          <type type="ident" def="uint"/>
        </type>
        <type type="struct" name="SearchResult">
          <field type="ident" def="string" name="Query"/>
          <field type="ident" def="string" name="Alert"/>
          <field type="ident" def="HitList" name="Pak"/>
          <field type="pointer" name="Hit">
            <type type="ident" def="LookupResult"/>
          </field>
          <field type="pointer" name="Alt">
            <type type="ident" def="AltWords"/>
          </field>
          <field type="ident" def="int" name="Found"/>
          <field type="slice" name="Textual">
            <elmtype type="ident" def="FileLines"/>
          </field>
          <field type="ident" def="bool" name="Complete"/>
          <field type="map" name="Idents">
            <keytype type="ident" def="SpotKind"/>
            <valtype type="slice">
              <elmtype type="ident" def="Ident"/>
            </valtype>
          </field>
        </type>
        <type name="SearchResultFunc" type="func">
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
            <type type="ident" def="SearchResult"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </type>
        <type type="struct" name="Presentation">
          <field type="pointer" name="Corpus">
            <type type="ident" def="Corpus"/>
          </field>
          <field type="pointer" name="mux">
            <type type="selector">
              <prefix value="http"/>
              <item value="ServeMux"/>
            </type>
          </field>
          <field type="selector" name="fileServer">
            <prefix value="http"/>
            <item value="Handler"/>
          </field>
          <field type="ident" def="handlerServer" name="cmdHandler"/>
          <field type="ident" def="handlerServer" name="pkgHandler"/>
          <field type="pointer" name="CallGraphHTML">
            <type type="selector">
              <prefix value="template"/>
              <item value="Template"/>
            </type>
          </field>
          <field type="pointer" name="DirlistHTML">
            <type type="selector">
              <prefix value="template"/>
              <item value="Template"/>
            </type>
          </field>
          <field type="pointer" name="ErrorHTML">
            <type type="selector">
              <prefix value="template"/>
              <item value="Template"/>
            </type>
          </field>
          <field type="pointer" name="ExampleHTML">
            <type type="selector">
              <prefix value="template"/>
              <item value="Template"/>
            </type>
          </field>
          <field type="pointer" name="GodocHTML">
            <type type="selector">
              <prefix value="template"/>
              <item value="Template"/>
            </type>
          </field>
          <field type="pointer" name="ImplementsHTML">
            <type type="selector">
              <prefix value="template"/>
              <item value="Template"/>
            </type>
          </field>
          <field type="pointer" name="MethodSetHTML">
            <type type="selector">
              <prefix value="template"/>
              <item value="Template"/>
            </type>
          </field>
          <field type="pointer" name="PackageHTML">
            <type type="selector">
              <prefix value="template"/>
              <item value="Template"/>
            </type>
          </field>
          <field type="pointer" name="PackageText">
            <type type="selector">
              <prefix value="template"/>
              <item value="Template"/>
            </type>
          </field>
          <field type="pointer" name="SearchHTML">
            <type type="selector">
              <prefix value="template"/>
              <item value="Template"/>
            </type>
          </field>
          <field type="pointer" name="SearchDocHTML">
            <type type="selector">
              <prefix value="template"/>
              <item value="Template"/>
            </type>
          </field>
          <field type="pointer" name="SearchCodeHTML">
            <type type="selector">
              <prefix value="template"/>
              <item value="Template"/>
            </type>
          </field>
          <field type="pointer" name="SearchTxtHTML">
            <type type="selector">
              <prefix value="template"/>
              <item value="Template"/>
            </type>
          </field>
          <field type="pointer" name="SearchText">
            <type type="selector">
              <prefix value="template"/>
              <item value="Template"/>
            </type>
          </field>
          <field type="pointer" name="SearchDescXML">
            <type type="selector">
              <prefix value="template"/>
              <item value="Template"/>
            </type>
          </field>
          <field type="ident" def="int" name="TabWidth"/>
          <field type="ident" def="bool" name="ShowTimestamps"/>
          <field type="ident" def="bool" name="ShowPlayground"/>
          <field type="ident" def="bool" name="ShowExamples"/>
          <field type="ident" def="bool" name="DeclLinks"/>
          <field type="ident" def="bool" name="SrcMode"/>
          <field type="ident" def="bool" name="HTMLMode"/>
          <field type="pointer" name="NotesRx">
            <type type="selector">
              <prefix value="regexp"/>
              <item value="Regexp"/>
            </type>
          </field>
          <field type="func" name="AdjustPageInfoMode">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="http"/>
                  <item value="Request"/>
                </type>
              </type>
              <type type="ident" def="PageInfoMode"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="PageInfoMode"/>
            </resultsList>
          </field>
          <field type="func" name="URLForSrc">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </field>
          <field type="func" name="URLForSrcPos">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="int"/>
              <type type="ident" def="int"/>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </field>
          <field type="func" name="URLForSrcQuery">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="string"/>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </field>
          <field type="slice" name="SearchResults">
            <elmtype type="ident" def="SearchResultFunc"/>
          </field>
          <field type="selector" name="initFuncMapOnce">
            <prefix value="sync"/>
            <item value="Once"/>
          </field>
          <field type="selector" name="funcMap">
            <prefix value="template"/>
            <item value="FuncMap"/>
          </field>
          <field type="selector" name="templateFuncs">
            <prefix value="template"/>
            <item value="FuncMap"/>
          </field>
        </type>
        <type type="struct" name="Page">
          <field type="ident" def="string" name="Title"/>
          <field type="ident" def="string" name="Tabtitle"/>
          <field type="ident" def="string" name="Subtitle"/>
          <field type="ident" def="string" name="Query"/>
          <field type="slice" name="Body">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="bool" name="SearchBox"/>
          <field type="ident" def="bool" name="Playground"/>
          <field type="ident" def="string" name="Version"/>
        </type>
        <type type="struct" name="Metadata">
          <field type="ident" def="string" name="Title"/>
          <field type="ident" def="string" name="Subtitle"/>
          <field type="ident" def="bool" name="Template"/>
          <field type="ident" def="string" name="Path"/>
          <field type="ident" def="string" name="filePath"/>
        </type>
        <type name="RunList" type="slice">
          <elmtype type="interface"/>
        </type>
        <type name="KindRun" type="slice">
          <elmtype type="ident" def="SpotInfo"/>
        </type>
        <type type="struct" name="Pak">
          <field type="ident" def="string" name="Path"/>
          <field type="ident" def="string" name="Name"/>
        </type>
        <type type="struct" name="File">
          <field type="ident" def="string" name="Name"/>
          <field type="pointer" name="Pak">
            <type type="ident" def="Pak"/>
          </field>
        </type>
        <type type="struct" name="Spot">
          <field type="pointer" name="File">
            <type type="ident" def="File"/>
          </field>
          <field type="ident" def="SpotInfo" name="Info"/>
        </type>
        <type type="struct" name="FileRun">
          <field type="pointer" name="File">
            <type type="ident" def="File"/>
          </field>
          <field type="slice" name="Groups">
            <elmtype type="ident" def="KindRun"/>
          </field>
        </type>
        <type type="struct" name="PakRun">
          <field type="pointer" name="Pak">
            <type type="ident" def="Pak"/>
          </field>
          <field type="slice" name="Files">
            <elmtype type="pointer">
              <type type="ident" def="FileRun"/>
            </elmtype>
          </field>
        </type>
        <type name="HitList" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="PakRun"/>
          </elmtype>
        </type>
        <type type="struct" name="AltWords">
          <field type="ident" def="string" name="Canon"/>
          <field type="slice" name="Alts">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="Ident">
          <field type="ident" def="string" name="Path"/>
          <field type="ident" def="string" name="Package"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Doc"/>
        </type>
        <type type="struct" name="IndexResult">
          <field type="ident" def="RunList" name="Decls"/>
          <field type="ident" def="RunList" name="Others"/>
        </type>
        <type type="struct" name="Statistics">
          <field type="ident" def="int" name="Bytes"/>
          <field type="ident" def="int" name="Files"/>
          <field type="ident" def="int" name="Lines"/>
          <field type="ident" def="int" name="Words"/>
          <field type="ident" def="int" name="Spots"/>
        </type>
        <type type="struct" name="Indexer">
          <field type="pointer" name="c">
            <type type="ident" def="Corpus"/>
          </field>
          <field type="pointer" name="fset">
            <type type="selector">
              <prefix value="token"/>
              <item value="FileSet"/>
            </type>
          </field>
          <field type="channel" dir="3" name="fsOpenGate">
            <type type="ident" def="bool"/>
          </field>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="selector" name="sources">
            <prefix value="bytes"/>
            <item value="Buffer"/>
          </field>
          <field type="map" name="strings">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="map" name="packages">
            <keytype type="ident" def="Pak"/>
            <valtype type="pointer">
              <type type="ident" def="Pak"/>
            </valtype>
          </field>
          <field type="map" name="words">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="IndexResult"/>
            </valtype>
          </field>
          <field type="slice" name="snippets">
            <elmtype type="pointer">
              <type type="ident" def="Snippet"/>
            </elmtype>
          </field>
          <field type="pointer" name="current">
            <type type="selector">
              <prefix value="token"/>
              <item value="File"/>
            </type>
          </field>
          <field type="pointer" name="file">
            <type type="ident" def="File"/>
          </field>
          <field type="selector" name="decl">
            <prefix value="ast"/>
            <item value="Decl"/>
          </field>
          <field type="ident" def="Statistics" name="stats"/>
          <field type="pointer" name="throttle">
            <type type="selector">
              <prefix value="util"/>
              <item value="Throttle"/>
            </type>
          </field>
          <field type="map" name="importCount">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="int"/>
          </field>
          <field type="map" name="packagePath">
            <keytype type="ident" def="string"/>
            <valtype type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="bool"/>
            </valtype>
          </field>
          <field type="map" name="exports">
            <keytype type="ident" def="string"/>
            <valtype type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="SpotKind"/>
            </valtype>
          </field>
          <field type="map" name="curPkgExports">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="SpotKind"/>
          </field>
          <field type="map" name="idents">
            <keytype type="ident" def="SpotKind"/>
            <valtype type="map">
              <keytype type="ident" def="string"/>
              <valtype type="slice">
                <elmtype type="ident" def="Ident"/>
              </valtype>
            </valtype>
          </field>
        </type>
        <type type="struct" name="LookupResult">
          <field type="ident" def="HitList" name="Decls"/>
          <field type="ident" def="HitList" name="Others"/>
        </type>
        <type type="struct" name="Index">
          <field type="pointer" name="fset">
            <type type="selector">
              <prefix value="token"/>
              <item value="FileSet"/>
            </type>
          </field>
          <field type="pointer" name="suffixes">
            <type type="selector">
              <prefix value="suffixarray"/>
              <item value="Index"/>
            </type>
          </field>
          <field type="map" name="words">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="LookupResult"/>
            </valtype>
          </field>
          <field type="map" name="alts">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="AltWords"/>
            </valtype>
          </field>
          <field type="slice" name="snippets">
            <elmtype type="pointer">
              <type type="ident" def="Snippet"/>
            </elmtype>
          </field>
          <field type="ident" def="Statistics" name="stats"/>
          <field type="map" name="importCount">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="int"/>
          </field>
          <field type="map" name="packagePath">
            <keytype type="ident" def="string"/>
            <valtype type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="bool"/>
            </valtype>
          </field>
          <field type="map" name="exports">
            <keytype type="ident" def="string"/>
            <valtype type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="SpotKind"/>
            </valtype>
          </field>
          <field type="map" name="idents">
            <keytype type="ident" def="SpotKind"/>
            <valtype type="map">
              <keytype type="ident" def="string"/>
              <valtype type="slice">
                <elmtype type="ident" def="Ident"/>
              </valtype>
            </valtype>
          </field>
          <field type="ident" def="indexOptions" name="opts"/>
        </type>
        <type type="struct" name="FileLines">
          <field type="ident" def="string" name="Filename"/>
          <field type="slice" name="Lines">
            <elmtype type="ident" def="int"/>
          </field>
        </type>
        <type type="struct" name="PageInfo">
          <field type="ident" def="string" name="Dirname"/>
          <field type="ident" def="error" name="Err"/>
          <field type="pointer" name="FSet">
            <type type="selector">
              <prefix value="token"/>
              <item value="FileSet"/>
            </type>
          </field>
          <field type="pointer" name="PDoc">
            <type type="selector">
              <prefix value="doc"/>
              <item value="Package"/>
            </type>
          </field>
          <field type="slice" name="Examples">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="doc"/>
                <item value="Example"/>
              </type>
            </elmtype>
          </field>
          <field type="map" name="Notes">
            <keytype type="ident" def="string"/>
            <valtype type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="doc"/>
                  <item value="Note"/>
                </type>
              </elmtype>
            </valtype>
          </field>
          <field type="map" name="PAst">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="File"/>
              </type>
            </valtype>
          </field>
          <field type="ident" def="bool" name="IsMain"/>
          <field type="ident" def="bool" name="IsFiltered"/>
          <field type="map" name="TypeInfoIndex">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="int"/>
          </field>
          <field type="selector" name="AnalysisData">
            <prefix value="htmltemplate"/>
            <item value="JS"/>
          </field>
          <field type="selector" name="CallGraph">
            <prefix value="htmltemplate"/>
            <item value="JS"/>
          </field>
          <field type="map" name="CallGraphIndex">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="int"/>
          </field>
          <field type="pointer" name="Dirs">
            <type type="ident" def="DirList"/>
          </field>
          <field type="selector" name="DirTime">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="bool" name="DirFlat"/>
        </type>
        <type type="struct" name="Segment">
          <field type="ident" def="int" name="start"/>
          <field type="ident" def="int" name="end"/>
        </type>
        <type name="Selection" type="func">
          <paramsList/>
          <resultsList>
            <type type="ident" def="Segment"/>
          </resultsList>
        </type>
        <type name="LinkWriter" type="func">
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </type>
        <type name="SegmentWriter" type="func">
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </type>
        <type type="struct" name="Directory">
          <field type="ident" def="int" name="Depth"/>
          <field type="ident" def="string" name="Path"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="bool" name="HasPkg"/>
          <field type="ident" def="string" name="Synopsis"/>
          <field type="slice" name="Dirs">
            <elmtype type="pointer">
              <type type="ident" def="Directory"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="DirEntry">
          <field type="ident" def="int" name="Depth"/>
          <field type="ident" def="int" name="Height"/>
          <field type="ident" def="string" name="Path"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="bool" name="HasPkg"/>
          <field type="ident" def="string" name="Synopsis"/>
        </type>
        <type type="struct" name="DirList">
          <field type="ident" def="int" name="MaxHeight"/>
          <field type="slice" name="List">
            <elmtype type="ident" def="DirEntry"/>
          </field>
        </type>
        <type type="struct" name="Corpus">
          <field type="selector" name="fs">
            <prefix value="vfs"/>
            <item value="FileSystem"/>
          </field>
          <field type="ident" def="bool" name="Verbose"/>
          <field type="ident" def="bool" name="IndexEnabled"/>
          <field type="ident" def="string" name="IndexFiles"/>
          <field type="ident" def="float64" name="IndexThrottle"/>
          <field type="selector" name="IndexInterval">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="bool" name="IndexDocs"/>
          <field type="ident" def="bool" name="IndexGoCode"/>
          <field type="ident" def="bool" name="IndexFullText"/>
          <field type="ident" def="int" name="MaxResults"/>
          <field type="func" name="SummarizePackage">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="string"/>
              <type type="ident" def="bool"/>
              <type type="ident" def="bool"/>
            </resultsList>
          </field>
          <field type="func" name="IndexDirectory">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </field>
          <field type="ident" def="string" name="testDir"/>
          <field type="channel" dir="3" name="refreshMetadataSignal">
            <type type="ident" def="bool"/>
          </field>
          <field type="selector" name="fsTree">
            <prefix value="util"/>
            <item value="RWValue"/>
          </field>
          <field type="selector" name="fsModified">
            <prefix value="util"/>
            <item value="RWValue"/>
          </field>
          <field type="selector" name="docMetadata">
            <prefix value="util"/>
            <item value="RWValue"/>
          </field>
          <field type="selector" name="searchIndex">
            <prefix value="util"/>
            <item value="RWValue"/>
          </field>
          <field type="selector" name="Analysis">
            <prefix value="analysis"/>
            <item value="Result"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tconv"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="SpotKind"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Kind">
          <recvList>
            <type type="ident" def="SpotInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="SpotKind"/>
          </resultsList>
        </function>
        <function name="Lori">
          <recvList>
            <type type="ident" def="SpotInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="IsIndex">
          <recvList>
            <type type="ident" def="SpotInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Linkify">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewSnippet">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="token"/>
                <item value="FileSet"/>
              </type>
            </type>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Decl"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="Ident"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Snippet"/>
            </type>
          </resultsList>
        </function>
        <function name="NewSnippet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="token"/>
                <item value="FileSet"/>
              </type>
            </type>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Decl"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="Ident"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Snippet"/>
            </type>
          </resultsList>
        </function>
        <function name="GetPageInfo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="handlerServer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="PageInfoMode"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PageInfo"/>
            </type>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="funcsByName"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="funcsByName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="funcsByName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ServeHTTP">
          <recvList>
            <type type="pointer">
              <type type="ident" def="handlerServer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetPageInfoMode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="PageInfoMode"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="writerCapturesErr"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ServeHTMLDoc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ServeFile">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ServeText">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Lookup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Corpus"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="SearchResult"/>
          </resultsList>
        </function>
        <function name="SearchResultDoc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="SearchResult"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="SearchResultCode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="SearchResult"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="SearchResultTxt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="SearchResult"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="HandleSearch">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewPresentation">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Corpus"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </resultsList>
        </function>
        <function name="FileServer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="Handler"/>
            </type>
          </resultsList>
        </function>
        <function name="ServeHTTP">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PkgFSRoot">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="CmdFSRoot">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetPkgPageInfo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="PageInfoMode"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PageInfo"/>
            </type>
          </resultsList>
        </function>
        <function name="GetCmdPageInfo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="PageInfoMode"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PageInfo"/>
            </type>
          </resultsList>
        </function>
        <function name="ServePage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="ident" def="Page"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ServeError">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="FilePath">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metadata"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MetadataFor">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Corpus"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Metadata"/>
            </type>
          </resultsList>
        </function>
        <function name="LinkifyText">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="interfaceSlice"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="pointer">
              <type type="ident" def="interfaceSlice"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="pointer">
              <type type="ident" def="interfaceSlice"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="KindRun"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="KindRun"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="KindRun"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Path">
          <recvList>
            <type type="pointer">
              <type type="ident" def="File"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PakRun"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PakRun"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PakRun"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byImportCount"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byImportCount"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byImportCount"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="byImportCount"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Visit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Indexer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Visitor"/>
            </type>
          </resultsList>
        </function>
        <function name="NewIndex">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Corpus"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Index"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteTo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Index"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadFrom">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Index"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Stats">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Index"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Statistics"/>
          </resultsList>
        </function>
        <function name="ImportCount">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Index"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="int"/>
            </type>
          </resultsList>
        </function>
        <function name="PackagePath">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Index"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="map">
                <keytype type="ident" def="string"/>
                <valtype type="ident" def="bool"/>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="Exports">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Index"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="map">
                <keytype type="ident" def="string"/>
                <valtype type="ident" def="SpotKind"/>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="Idents">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Index"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="SpotKind"/>
              <valtype type="map">
                <keytype type="ident" def="string"/>
                <valtype type="slice">
                  <elmtype type="ident" def="Ident"/>
                </valtype>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="Lookup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Index"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="SearchResult"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Snippet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Index"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Snippet"/>
            </type>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="positionList"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="positionList"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="positionList"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="LookupRegexp">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Index"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="regexp"/>
                <item value="Regexp"/>
              </type>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="slice">
              <elmtype type="ident" def="FileLines"/>
            </type>
          </resultsList>
        </function>
        <function name="CompatibleWith">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Index"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Corpus"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ReadIndexFrom">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Corpus"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UpdateIndex">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Corpus"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="RunIndexer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Corpus"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="ident" def="countingWriter"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="ident" def="countingReader"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadByte">
          <recvList>
            <type type="ident" def="countingReader"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="byte"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FuncMap">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="template"/>
              <item value="FuncMap"/>
            </type>
          </resultsList>
        </function>
        <function name="TemplateFuncs">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="template"/>
              <item value="FuncMap"/>
            </type>
          </resultsList>
        </function>
        <function name="IsEmpty">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PageInfo"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="WriteNode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="token"/>
                <item value="FileSet"/>
              </type>
            </type>
            <type type="interface"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="FormatSelections">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="LinkWriter"/>
            <type type="ident" def="Selection"/>
            <type type="ident" def="SegmentWriter"/>
            <type type="ellipsis">
              <type type="ident" def="Selection"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RangeSelection">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Selection"/>
          </resultsList>
        </function>
        <function name="FormatText">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
            <type type="ident" def="Selection"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewCorpus">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="vfs"/>
              <item value="FileSystem"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Corpus"/>
            </type>
          </resultsList>
        </function>
        <function name="CurrentIndex">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Corpus"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Index"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </resultsList>
        </function>
        <function name="FSModifiedTime">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Corpus"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </resultsList>
        </function>
        <function name="Init">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Corpus"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CommandLine">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="selector">
              <prefix value="vfs"/>
              <item value="NameSpace"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Presentation"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="PackageClause"/>
        <name value="ImportDecl"/>
        <name value="ConstDecl"/>
        <name value="TypeDecl"/>
        <name value="VarDecl"/>
        <name value="FuncDecl"/>
        <name value="MethodDecl"/>
        <name value="Use"/>
        <name value="NoFiltering"/>
        <name value="AllMethods"/>
        <name value="ShowSource"/>
        <name value="NoHTML"/>
        <name value="FlatDir"/>
        <name value="NoTypeAssoc"/>
        <name value="ErrFileIndexVersion"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/refactor/importgraph">
      <types>
        <type name="Graph" type="map">
          <keytype type="ident" def="string"/>
          <valtype type="map">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="bool"/>
          </valtype>
        </type>
      </types>
      <functions>
        <function name="Search">
          <recvList>
            <type type="ident" def="Graph"/>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="Build">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="build"/>
                <item value="Context"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Graph"/>
            <type type="ident" def="Graph"/>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="error"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/cover">
      <types>
        <type type="struct" name="Profile">
          <field type="ident" def="string" name="FileName"/>
          <field type="ident" def="string" name="Mode"/>
          <field type="slice" name="Blocks">
            <elmtype type="ident" def="ProfileBlock"/>
          </field>
        </type>
        <type type="struct" name="ProfileBlock">
          <field type="ident" def="int" name="StartLine"/>
          <field type="ident" def="int" name="StartCol"/>
          <field type="ident" def="int" name="EndLine"/>
          <field type="ident" def="int" name="EndCol"/>
          <field type="ident" def="int" name="NumStmt"/>
          <field type="ident" def="int" name="Count"/>
        </type>
        <type type="struct" name="Boundary">
          <field type="ident" def="int" name="Offset"/>
          <field type="ident" def="bool" name="Start"/>
          <field type="ident" def="int" name="Count"/>
          <field type="ident" def="float64" name="Norm"/>
        </type>
      </types>
      <functions>
        <function name="Len">
          <recvList>
            <type type="ident" def="byFileName"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byFileName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byFileName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ParseProfiles">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Profile"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="blocksByStart"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="blocksByStart"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="blocksByStart"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Boundaries">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Profile"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Boundary"/>
            </type>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="boundariesByPos"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="boundariesByPos"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="boundariesByPos"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/blog/atom">
      <types>
        <type type="struct" name="Feed">
          <field type="selector" name="XMLName">
            <prefix value="xml"/>
            <item value="Name"/>
          </field>
          <field type="ident" def="string" name="Title"/>
          <field type="ident" def="string" name="ID"/>
          <field type="slice" name="Link">
            <elmtype type="ident" def="Link"/>
          </field>
          <field type="ident" def="TimeStr" name="Updated"/>
          <field type="pointer" name="Author">
            <type type="ident" def="Person"/>
          </field>
          <field type="slice" name="Entry">
            <elmtype type="pointer">
              <type type="ident" def="Entry"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="Entry">
          <field type="ident" def="string" name="Title"/>
          <field type="ident" def="string" name="ID"/>
          <field type="slice" name="Link">
            <elmtype type="ident" def="Link"/>
          </field>
          <field type="ident" def="TimeStr" name="Published"/>
          <field type="ident" def="TimeStr" name="Updated"/>
          <field type="pointer" name="Author">
            <type type="ident" def="Person"/>
          </field>
          <field type="pointer" name="Summary">
            <type type="ident" def="Text"/>
          </field>
          <field type="pointer" name="Content">
            <type type="ident" def="Text"/>
          </field>
        </type>
        <type type="struct" name="Link">
          <field type="ident" def="string" name="Rel"/>
          <field type="ident" def="string" name="Href"/>
        </type>
        <type type="struct" name="Person">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="URI"/>
          <field type="ident" def="string" name="Email"/>
          <field type="ident" def="string" name="InnerXML"/>
        </type>
        <type type="struct" name="Text">
          <field type="ident" def="string" name="Type"/>
          <field type="ident" def="string" name="Body"/>
        </type>
        <type name="TimeStr" type="ident">
          <type type="ident" def="string"/>
        </type>
      </types>
      <functions>
        <function name="Time">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="TimeStr"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/cmd/vet/whitelist">
      <types/>
      <functions/>
      <names>
        <name value="UnkeyedLiteral"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/dashboard/app/key">
      <types/>
      <functions>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="builderKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="datastore"/>
                <item value="Key"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Secret">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="appengine"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/go/ssa/interp">
      <types>
        <type name="Mode" type="ident">
          <type type="ident" def="uint"/>
        </type>
      </types>
      <functions>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="opaqueType"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="targetPanic"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Interpret">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ssa"/>
                <item value="Package"/>
              </type>
            </type>
            <type type="ident" def="Mode"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="Sizes"/>
            </type>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="CapturedOutput"/>
        <name value="DisableRecover"/>
        <name value="EnableTracing"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/go/gcimporter/testdata">
      <types>
        <type name="T1" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type name="T2" type="array">
          <elmtype type="ident" def="int"/>
        </type>
        <type name="T3" type="slice">
          <elmtype type="ident" def="int"/>
        </type>
        <type name="T4" type="pointer">
          <type type="pointer">
            <type type="ident" def="int"/>
          </type>
        </type>
        <type name="T5" type="channel" dir="3">
          <type type="ident" def="int"/>
        </type>
        <type name="T6a" type="channel" dir="1">
          <type type="ident" def="int"/>
        </type>
        <type name="T6b" type="channel" dir="3">
          <type type="parenthesis">
            <type type="channel" dir="2">
              <type type="ident" def="int"/>
            </type>
          </type>
        </type>
        <type name="T6c" type="channel" dir="1">
          <type type="parenthesis">
            <type type="channel" dir="3">
              <type type="ident" def="int"/>
            </type>
          </type>
        </type>
        <type name="T7" type="channel" dir="2">
          <type type="pointer">
            <type type="selector">
              <prefix value="ast"/>
              <item value="File"/>
            </type>
          </type>
        </type>
        <type type="struct" name="T8"/>
        <type type="struct" name="T9">
          <field type="ident" def="int" name="a"/>
          <field type="ident" def="float32" name="b"/>
          <field type="ident" def="float32" name="c"/>
          <field type="slice" name="d">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="T10">
          <field type="ident" def="T8" name=""/>
          <field type="ident" def="T9" name=""/>
          <field type="pointer" name="_">
            <type type="ident" def="T10"/>
          </field>
        </type>
        <type name="T11" type="map">
          <keytype type="ident" def="int"/>
          <valtype type="ident" def="string"/>
        </type>
        <type name="T12" type="interface"/>
        <type name="T13" type="interface">
          <method name="m1">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="m2">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="float32"/>
            </resultsList>
          </method>
        </type>
        <type name="T14" type="interface">
          <method name="m3">
            <paramsList>
              <type type="ellipsis">
                <type type="struct" name=""/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="T9"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="T15" type="func">
          <paramsList/>
          <resultsList/>
        </type>
        <type name="T16" type="func">
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </type>
        <type name="T17" type="func">
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </type>
        <type name="T18" type="func">
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </type>
        <type name="T19" type="func">
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </type>
        <type name="T20" type="func">
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </type>
        <type type="struct" name="T21">
          <field type="pointer" name="next">
            <type type="ident" def="T21"/>
          </field>
        </type>
        <type type="struct" name="T22">
          <field type="pointer" name="link">
            <type type="ident" def="T23"/>
          </field>
        </type>
        <type type="struct" name="T23">
          <field type="pointer" name="link">
            <type type="ident" def="T22"/>
          </field>
        </type>
        <type name="T24" type="pointer">
          <type type="pointer">
            <type type="ident" def="T24"/>
          </type>
        </type>
        <type name="T25" type="pointer">
          <type type="pointer">
            <type type="ident" def="T26"/>
          </type>
        </type>
        <type name="T26" type="pointer">
          <type type="pointer">
            <type type="ident" def="T27"/>
          </type>
        </type>
        <type name="T27" type="pointer">
          <type type="pointer">
            <type type="ident" def="T25"/>
          </type>
        </type>
        <type name="T28" type="func">
          <paramsList>
            <type type="ident" def="T28"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="T28"/>
          </resultsList>
        </type>
      </types>
      <functions>
        <function name="F1">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="F2">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="F3">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="F4">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="F5">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="struct" name="">
              <field type="ident" def="T1" name="x"/>
              <field type="ident" def="T1" name="y"/>
            </type>
            <type type="struct" name="">
              <field type="ident" def="T1" name="x"/>
              <field type="ident" def="T1" name="y"/>
            </type>
            <type type="struct" name="">
              <field type="ident" def="T1" name="x"/>
              <field type="ident" def="T1" name="y"/>
            </type>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="channel" dir="1">
              <type type="ident" def="T10"/>
            </type>
            <type type="channel" dir="1">
              <type type="ident" def="T10"/>
            </type>
            <type type="channel" dir="1">
              <type type="ident" def="T10"/>
            </type>
          </resultsList>
        </function>
        <function name="M1">
          <recvList>
            <type type="pointer">
              <type type="ident" def="T1"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="C0"/>
        <name value="C1"/>
        <name value="C2"/>
        <name value="C3"/>
        <name value="C4"/>
        <name value="C5"/>
        <name value="C6"/>
        <name value="C7"/>
        <name value="V0"/>
        <name value="V1"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/go/pointer">
      <types>
        <type type="struct" name="Label">
          <field type="pointer" name="obj">
            <type type="ident" def="object"/>
          </field>
          <field type="pointer" name="subelement">
            <type type="ident" def="fieldInfo"/>
          </field>
        </type>
        <type type="struct" name="Config">
          <field type="slice" name="Mains">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="ssa"/>
                <item value="Package"/>
              </type>
            </elmtype>
          </field>
          <field type="ident" def="bool" name="Reflection"/>
          <field type="ident" def="bool" name="BuildCallGraph"/>
          <field type="map" name="Queries">
            <keytype type="selector">
              <prefix value="ssa"/>
              <item value="Value"/>
            </keytype>
            <valtype type="struct" name=""/>
          </field>
          <field type="map" name="IndirectQueries">
            <keytype type="selector">
              <prefix value="ssa"/>
              <item value="Value"/>
            </keytype>
            <valtype type="struct" name=""/>
          </field>
          <field type="selector" name="Log">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
        </type>
        <type type="struct" name="Warning">
          <field type="selector" name="Pos">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
          <field type="ident" def="string" name="Message"/>
        </type>
        <type type="struct" name="Result">
          <field type="pointer" name="CallGraph">
            <type type="selector">
              <prefix value="callgraph"/>
              <item value="Graph"/>
            </type>
          </field>
          <field type="map" name="Queries">
            <keytype type="selector">
              <prefix value="ssa"/>
              <item value="Value"/>
            </keytype>
            <valtype type="ident" def="Pointer"/>
          </field>
          <field type="map" name="IndirectQueries">
            <keytype type="selector">
              <prefix value="ssa"/>
              <item value="Value"/>
            </keytype>
            <valtype type="ident" def="Pointer"/>
          </field>
          <field type="slice" name="Warnings">
            <elmtype type="ident" def="Warning"/>
          </field>
        </type>
        <type type="struct" name="Pointer">
          <field type="pointer" name="a">
            <type type="ident" def="analysis"/>
          </field>
          <field type="ident" def="nodeid" name="n"/>
        </type>
        <type type="struct" name="PointsToSet">
          <field type="pointer" name="a">
            <type type="ident" def="analysis"/>
          </field>
          <field type="pointer" name="pts">
            <type type="ident" def="nodeset"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="CanPoint">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="CanHaveDynamicTypes">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="nodeset"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rVBytesConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rVCallConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rVElemConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rVIndexConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rVInterfaceConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rVMapIndexConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rVMapKeysConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rVRecvConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rVSendConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rVSetBytesConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rVSetMapIndexConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rVSliceConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="reflectChanOfConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="reflectIndirectConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="reflectMakeChanConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="reflectMakeMapConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="reflectMakeSliceConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="reflectNewConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="reflectPtrToConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="reflectSliceOfConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="reflectTypeOfConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="reflectZeroConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rtypeElemConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rtypeFieldByNameConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rtypeInOutConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rtypeKeyConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rtypeMethodByNameConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="addrConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="copyConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="loadConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="storeConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="offsetAddrConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="typeFilterConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="untagConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="invokeConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="nodeid"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="ident" def="Label"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="ssa"/>
              <item value="Value"/>
            </type>
          </resultsList>
        </function>
        <function name="ReflectType">
          <recvList>
            <type type="ident" def="Label"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </resultsList>
        </function>
        <function name="Path">
          <recvList>
            <type type="ident" def="Label"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="ident" def="Label"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Label"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="runtimeSetFinalizerConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="timeStartTimerConstraint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="cgnode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="callsite"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="AddQuery">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="ssa"/>
              <item value="Value"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AddIndirectQuery">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="ssa"/>
              <item value="Value"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="PointsToSet"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Labels">
          <recvList>
            <type type="ident" def="PointsToSet"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Label"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="DynamicTypes">
          <recvList>
            <type type="ident" def="PointsToSet"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="typeutil"/>
                <item value="Map"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Intersects">
          <recvList>
            <type type="ident" def="PointsToSet"/>
          </recvList>
          <paramsList>
            <type type="ident" def="PointsToSet"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Pointer"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="PointsTo">
          <recvList>
            <type type="ident" def="Pointer"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="PointsToSet"/>
          </resultsList>
        </function>
        <function name="MayAlias">
          <recvList>
            <type type="ident" def="Pointer"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Pointer"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="DynamicTypes">
          <recvList>
            <type type="ident" def="Pointer"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="typeutil"/>
                <item value="Map"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Analyze">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/container/intsets">
      <types>
        <type type="struct" name="Sparse">
          <field type="ident" def="block" name="root"/>
        </type>
      </types>
      <functions>
        <function name="IsEmpty">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Max">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Min">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Insert">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Remove">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Clear">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="TakeMin">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="int"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Has">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Copy">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="IntersectionWith">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Intersection">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="UnionWith">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Union">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="DifferenceWith">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Difference">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Equals">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="BitString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GoString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="AppendTo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sparse"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="int"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="MaxInt"/>
        <name value="MinInt"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/go/callgraph/cha">
      <types/>
      <functions>
        <function name="CallGraph">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ssa"/>
                <item value="Program"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="callgraph"/>
                <item value="Graph"/>
              </type>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/oracle/serial">
      <types>
        <type type="struct" name="Peers">
          <field type="ident" def="string" name="Pos"/>
          <field type="ident" def="string" name="Type"/>
          <field type="slice" name="Allocs">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="Sends">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="Receives">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="Closes">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="Referrers">
          <field type="ident" def="string" name="Pos"/>
          <field type="ident" def="string" name="ObjPos"/>
          <field type="ident" def="string" name="Desc"/>
          <field type="slice" name="Refs">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="Definition">
          <field type="ident" def="string" name="ObjPos"/>
          <field type="ident" def="string" name="Desc"/>
        </type>
        <type type="struct" name="CalleesItem">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Pos"/>
        </type>
        <type type="struct" name="Callees">
          <field type="ident" def="string" name="Pos"/>
          <field type="ident" def="string" name="Desc"/>
          <field type="slice" name="Callees">
            <elmtype type="pointer">
              <type type="ident" def="CalleesItem"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="Caller">
          <field type="ident" def="string" name="Pos"/>
          <field type="ident" def="string" name="Desc"/>
          <field type="ident" def="string" name="Caller"/>
        </type>
        <type type="struct" name="CallGraph">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Pos"/>
          <field type="slice" name="Children">
            <elmtype type="ident" def="int"/>
          </field>
        </type>
        <type type="struct" name="CallStack">
          <field type="ident" def="string" name="Pos"/>
          <field type="ident" def="string" name="Target"/>
          <field type="slice" name="Callers">
            <elmtype type="ident" def="Caller"/>
          </field>
        </type>
        <type type="struct" name="FreeVar">
          <field type="ident" def="string" name="Pos"/>
          <field type="ident" def="string" name="Kind"/>
          <field type="ident" def="string" name="Ref"/>
          <field type="ident" def="string" name="Type"/>
        </type>
        <type type="struct" name="Implements">
          <field type="ident" def="ImplementsType" name="T"/>
          <field type="slice" name="AssignableTo">
            <elmtype type="ident" def="ImplementsType"/>
          </field>
          <field type="slice" name="AssignableFrom">
            <elmtype type="ident" def="ImplementsType"/>
          </field>
          <field type="slice" name="AssignableFromPtr">
            <elmtype type="ident" def="ImplementsType"/>
          </field>
        </type>
        <type type="struct" name="ImplementsType">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Pos"/>
          <field type="ident" def="string" name="Kind"/>
        </type>
        <type type="struct" name="SyntaxNode">
          <field type="ident" def="string" name="Description"/>
          <field type="ident" def="int" name="Start"/>
          <field type="ident" def="int" name="End"/>
        </type>
        <type type="struct" name="What">
          <field type="slice" name="Enclosing">
            <elmtype type="ident" def="SyntaxNode"/>
          </field>
          <field type="slice" name="Modes">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="string" name="SrcDir"/>
          <field type="ident" def="string" name="ImportPath"/>
        </type>
        <type type="struct" name="PointsToLabel">
          <field type="ident" def="string" name="Pos"/>
          <field type="ident" def="string" name="Desc"/>
        </type>
        <type type="struct" name="PointsTo">
          <field type="ident" def="string" name="Type"/>
          <field type="ident" def="string" name="NamePos"/>
          <field type="slice" name="Labels">
            <elmtype type="ident" def="PointsToLabel"/>
          </field>
        </type>
        <type type="struct" name="DescribeValue">
          <field type="ident" def="string" name="Type"/>
          <field type="ident" def="string" name="Value"/>
          <field type="ident" def="string" name="ObjPos"/>
        </type>
        <type type="struct" name="DescribeMethod">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Pos"/>
        </type>
        <type type="struct" name="DescribeType">
          <field type="ident" def="string" name="Type"/>
          <field type="ident" def="string" name="NamePos"/>
          <field type="ident" def="string" name="NameDef"/>
          <field type="slice" name="Methods">
            <elmtype type="ident" def="DescribeMethod"/>
          </field>
        </type>
        <type type="struct" name="DescribeMember">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Type"/>
          <field type="ident" def="string" name="Value"/>
          <field type="ident" def="string" name="Pos"/>
          <field type="ident" def="string" name="Kind"/>
          <field type="slice" name="Methods">
            <elmtype type="ident" def="DescribeMethod"/>
          </field>
        </type>
        <type type="struct" name="DescribePackage">
          <field type="ident" def="string" name="Path"/>
          <field type="slice" name="Members">
            <elmtype type="pointer">
              <type type="ident" def="DescribeMember"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="Describe">
          <field type="ident" def="string" name="Desc"/>
          <field type="ident" def="string" name="Pos"/>
          <field type="ident" def="string" name="Detail"/>
          <field type="pointer" name="Package">
            <type type="ident" def="DescribePackage"/>
          </field>
          <field type="pointer" name="Type">
            <type type="ident" def="DescribeType"/>
          </field>
          <field type="pointer" name="Value">
            <type type="ident" def="DescribeValue"/>
          </field>
        </type>
        <type type="struct" name="PTAWarning">
          <field type="ident" def="string" name="Pos"/>
          <field type="ident" def="string" name="Message"/>
        </type>
        <type type="struct" name="WhichErrs">
          <field type="ident" def="string" name="ErrPos"/>
          <field type="slice" name="Globals">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="Constants">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="Types">
            <elmtype type="ident" def="WhichErrsType"/>
          </field>
        </type>
        <type type="struct" name="WhichErrsType">
          <field type="ident" def="string" name="Type"/>
          <field type="ident" def="string" name="Position"/>
        </type>
        <type type="struct" name="Result">
          <field type="ident" def="string" name="Mode"/>
          <field type="pointer" name="Callees">
            <type type="ident" def="Callees"/>
          </field>
          <field type="slice" name="Callers">
            <elmtype type="ident" def="Caller"/>
          </field>
          <field type="slice" name="Callgraph">
            <elmtype type="ident" def="CallGraph"/>
          </field>
          <field type="pointer" name="Callstack">
            <type type="ident" def="CallStack"/>
          </field>
          <field type="pointer" name="Definition">
            <type type="ident" def="Definition"/>
          </field>
          <field type="pointer" name="Describe">
            <type type="ident" def="Describe"/>
          </field>
          <field type="slice" name="Freevars">
            <elmtype type="pointer">
              <type type="ident" def="FreeVar"/>
            </elmtype>
          </field>
          <field type="pointer" name="Implements">
            <type type="ident" def="Implements"/>
          </field>
          <field type="pointer" name="Peers">
            <type type="ident" def="Peers"/>
          </field>
          <field type="slice" name="PointsTo">
            <elmtype type="ident" def="PointsTo"/>
          </field>
          <field type="pointer" name="Referrers">
            <type type="ident" def="Referrers"/>
          </field>
          <field type="pointer" name="What">
            <type type="ident" def="What"/>
          </field>
          <field type="pointer" name="WhichErrs">
            <type type="ident" def="WhichErrs"/>
          </field>
          <field type="slice" name="Warnings">
            <elmtype type="ident" def="PTAWarning"/>
          </field>
        </type>
      </types>
      <functions/>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/playground/socket">
      <types>
        <type type="struct" name="Message">
          <field type="ident" def="string" name="Id"/>
          <field type="ident" def="string" name="Kind"/>
          <field type="ident" def="string" name="Body"/>
          <field type="pointer" name="Options">
            <type type="ident" def="Options"/>
          </field>
        </type>
        <type type="struct" name="Options">
          <field type="ident" def="bool" name="Race"/>
        </type>
      </types>
      <functions>
        <function name="NewHandler">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="url"/>
                <item value="URL"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="websocket"/>
              <item value="Server"/>
            </type>
          </resultsList>
        </function>
        <function name="Kill">
          <recvList>
            <type type="pointer">
              <type type="ident" def="process"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="messageWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="RunScripts"/>
        <name value="Environ"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/go/ssa">
      <types>
        <type type="struct" name="Program">
          <field type="pointer" name="Fset">
            <type type="selector">
              <prefix value="token"/>
              <item value="FileSet"/>
            </type>
          </field>
          <field type="map" name="imported">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="Package"/>
            </valtype>
          </field>
          <field type="map" name="packages">
            <keytype type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </keytype>
            <valtype type="pointer">
              <type type="ident" def="Package"/>
            </valtype>
          </field>
          <field type="ident" def="BuilderMode" name="mode"/>
          <field type="selector" name="MethodSets">
            <prefix value="types"/>
            <item value="MethodSetCache"/>
          </field>
          <field type="selector" name="methodsMu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="selector" name="methodSets">
            <prefix value="typeutil"/>
            <item value="Map"/>
          </field>
          <field type="map" name="bounds">
            <keytype type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Func"/>
              </type>
            </keytype>
            <valtype type="pointer">
              <type type="ident" def="Function"/>
            </valtype>
          </field>
          <field type="map" name="thunks">
            <keytype type="ident" def="selectionKey"/>
            <valtype type="pointer">
              <type type="ident" def="Function"/>
            </valtype>
          </field>
        </type>
        <type type="struct" name="Package">
          <field type="pointer" name="Prog">
            <type type="ident" def="Program"/>
          </field>
          <field type="pointer" name="Object">
            <type type="selector">
              <prefix value="types"/>
              <item value="Package"/>
            </type>
          </field>
          <field type="map" name="Members">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="Member"/>
          </field>
          <field type="selector" name="methodsMu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="slice" name="methodSets">
            <elmtype type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </elmtype>
          </field>
          <field type="map" name="values">
            <keytype type="selector">
              <prefix value="types"/>
              <item value="Object"/>
            </keytype>
            <valtype type="ident" def="Value"/>
          </field>
          <field type="pointer" name="init">
            <type type="ident" def="Function"/>
          </field>
          <field type="ident" def="bool" name="debug"/>
          <field type="ident" def="int32" name="started"/>
          <field type="ident" def="int32" name="ninit"/>
          <field type="pointer" name="info">
            <type type="selector">
              <prefix value="loader"/>
              <item value="PackageInfo"/>
            </type>
          </field>
          <field type="selector" name="needRTTI">
            <prefix value="typeutil"/>
            <item value="Map"/>
          </field>
        </type>
        <type name="Member" type="interface">
          <method name="Name">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="RelString">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="Package"/>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="Object">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="types"/>
                <item value="Object"/>
              </type>
            </resultsList>
          </method>
          <method name="Pos">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="token"/>
                <item value="Pos"/>
              </type>
            </resultsList>
          </method>
          <method name="Type">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="types"/>
                <item value="Type"/>
              </type>
            </resultsList>
          </method>
          <method name="Token">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="token"/>
                <item value="Token"/>
              </type>
            </resultsList>
          </method>
          <method name="Package">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Package"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Type">
          <field type="pointer" name="object">
            <type type="selector">
              <prefix value="types"/>
              <item value="TypeName"/>
            </type>
          </field>
          <field type="pointer" name="pkg">
            <type type="ident" def="Package"/>
          </field>
        </type>
        <type type="struct" name="NamedConst">
          <field type="pointer" name="object">
            <type type="selector">
              <prefix value="types"/>
              <item value="Const"/>
            </type>
          </field>
          <field type="pointer" name="Value">
            <type type="ident" def="Const"/>
          </field>
          <field type="selector" name="pos">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
          <field type="pointer" name="pkg">
            <type type="ident" def="Package"/>
          </field>
        </type>
        <type name="Value" type="interface">
          <method name="Name">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="Type">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="types"/>
                <item value="Type"/>
              </type>
            </resultsList>
          </method>
          <method name="Parent">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Function"/>
              </type>
            </resultsList>
          </method>
          <method name="Referrers">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="slice">
                  <elmtype type="ident" def="Instruction"/>
                </type>
              </type>
            </resultsList>
          </method>
          <method name="Pos">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="token"/>
                <item value="Pos"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="Instruction" type="interface">
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="Parent">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Function"/>
              </type>
            </resultsList>
          </method>
          <method name="Block">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="BasicBlock"/>
              </type>
            </resultsList>
          </method>
          <method name="setBlock">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="BasicBlock"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Operands">
            <paramsList>
              <type type="slice">
                <elmtype type="pointer">
                  <type type="ident" def="Value"/>
                </elmtype>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="pointer">
                  <type type="ident" def="Value"/>
                </elmtype>
              </type>
            </resultsList>
          </method>
          <method name="Pos">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="token"/>
                <item value="Pos"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="Node" type="interface">
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="Pos">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="token"/>
                <item value="Pos"/>
              </type>
            </resultsList>
          </method>
          <method name="Parent">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Function"/>
              </type>
            </resultsList>
          </method>
          <method name="Operands">
            <paramsList>
              <type type="slice">
                <elmtype type="pointer">
                  <type type="ident" def="Value"/>
                </elmtype>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="pointer">
                  <type type="ident" def="Value"/>
                </elmtype>
              </type>
            </resultsList>
          </method>
          <method name="Referrers">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="slice">
                  <elmtype type="ident" def="Instruction"/>
                </type>
              </type>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Function">
          <field type="ident" def="string" name="name"/>
          <field type="selector" name="object">
            <prefix value="types"/>
            <item value="Object"/>
          </field>
          <field type="pointer" name="method">
            <type type="selector">
              <prefix value="types"/>
              <item value="Selection"/>
            </type>
          </field>
          <field type="pointer" name="Signature">
            <type type="selector">
              <prefix value="types"/>
              <item value="Signature"/>
            </type>
          </field>
          <field type="selector" name="pos">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
          <field type="ident" def="string" name="Synthetic"/>
          <field type="selector" name="syntax">
            <prefix value="ast"/>
            <item value="Node"/>
          </field>
          <field type="pointer" name="parent">
            <type type="ident" def="Function"/>
          </field>
          <field type="pointer" name="Pkg">
            <type type="ident" def="Package"/>
          </field>
          <field type="pointer" name="Prog">
            <type type="ident" def="Program"/>
          </field>
          <field type="slice" name="Params">
            <elmtype type="pointer">
              <type type="ident" def="Parameter"/>
            </elmtype>
          </field>
          <field type="slice" name="FreeVars">
            <elmtype type="pointer">
              <type type="ident" def="FreeVar"/>
            </elmtype>
          </field>
          <field type="slice" name="Locals">
            <elmtype type="pointer">
              <type type="ident" def="Alloc"/>
            </elmtype>
          </field>
          <field type="slice" name="Blocks">
            <elmtype type="pointer">
              <type type="ident" def="BasicBlock"/>
            </elmtype>
          </field>
          <field type="pointer" name="Recover">
            <type type="ident" def="BasicBlock"/>
          </field>
          <field type="slice" name="AnonFuncs">
            <elmtype type="pointer">
              <type type="ident" def="Function"/>
            </elmtype>
          </field>
          <field type="slice" name="referrers">
            <elmtype type="ident" def="Instruction"/>
          </field>
          <field type="pointer" name="currentBlock">
            <type type="ident" def="BasicBlock"/>
          </field>
          <field type="map" name="objects">
            <keytype type="selector">
              <prefix value="types"/>
              <item value="Object"/>
            </keytype>
            <valtype type="ident" def="Value"/>
          </field>
          <field type="slice" name="namedResults">
            <elmtype type="pointer">
              <type type="ident" def="Alloc"/>
            </elmtype>
          </field>
          <field type="pointer" name="targets">
            <type type="ident" def="targets"/>
          </field>
          <field type="map" name="lblocks">
            <keytype type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="Object"/>
              </type>
            </keytype>
            <valtype type="pointer">
              <type type="ident" def="lblock"/>
            </valtype>
          </field>
        </type>
        <type type="struct" name="BasicBlock">
          <field type="ident" def="int" name="Index"/>
          <field type="ident" def="string" name="Comment"/>
          <field type="pointer" name="parent">
            <type type="ident" def="Function"/>
          </field>
          <field type="slice" name="Instrs">
            <elmtype type="ident" def="Instruction"/>
          </field>
          <field type="slice" name="Preds">
            <elmtype type="pointer">
              <type type="ident" def="BasicBlock"/>
            </elmtype>
          </field>
          <field type="slice" name="Succs">
            <elmtype type="pointer">
              <type type="ident" def="BasicBlock"/>
            </elmtype>
          </field>
          <field type="array" name="succs2">
            <elmtype type="pointer">
              <type type="ident" def="BasicBlock"/>
            </elmtype>
          </field>
          <field type="ident" def="domInfo" name="dom"/>
          <field type="ident" def="int" name="gaps"/>
          <field type="ident" def="int" name="rundefers"/>
        </type>
        <type type="struct" name="FreeVar">
          <field type="ident" def="string" name="name"/>
          <field type="selector" name="typ">
            <prefix value="types"/>
            <item value="Type"/>
          </field>
          <field type="selector" name="pos">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
          <field type="pointer" name="parent">
            <type type="ident" def="Function"/>
          </field>
          <field type="slice" name="referrers">
            <elmtype type="ident" def="Instruction"/>
          </field>
          <field type="ident" def="Value" name="outer"/>
        </type>
        <type type="struct" name="Parameter">
          <field type="ident" def="string" name="name"/>
          <field type="selector" name="object">
            <prefix value="types"/>
            <item value="Object"/>
          </field>
          <field type="selector" name="typ">
            <prefix value="types"/>
            <item value="Type"/>
          </field>
          <field type="selector" name="pos">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
          <field type="pointer" name="parent">
            <type type="ident" def="Function"/>
          </field>
          <field type="slice" name="referrers">
            <elmtype type="ident" def="Instruction"/>
          </field>
        </type>
        <type type="struct" name="Const">
          <field type="selector" name="typ">
            <prefix value="types"/>
            <item value="Type"/>
          </field>
          <field type="selector" name="Value">
            <prefix value="exact"/>
            <item value="Value"/>
          </field>
        </type>
        <type type="struct" name="Global">
          <field type="ident" def="string" name="name"/>
          <field type="selector" name="object">
            <prefix value="types"/>
            <item value="Object"/>
          </field>
          <field type="selector" name="typ">
            <prefix value="types"/>
            <item value="Type"/>
          </field>
          <field type="selector" name="pos">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
          <field type="pointer" name="Pkg">
            <type type="ident" def="Package"/>
          </field>
        </type>
        <type type="struct" name="Builtin">
          <field type="ident" def="string" name="name"/>
          <field type="pointer" name="sig">
            <type type="selector">
              <prefix value="types"/>
              <item value="Signature"/>
            </type>
          </field>
        </type>
        <type type="struct" name="Alloc">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="string" name="Comment"/>
          <field type="ident" def="bool" name="Heap"/>
          <field type="ident" def="int" name="index"/>
        </type>
        <type type="struct" name="Phi">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="string" name="Comment"/>
          <field type="slice" name="Edges">
            <elmtype type="ident" def="Value"/>
          </field>
        </type>
        <type type="struct" name="Call">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="CallCommon" name="Call"/>
        </type>
        <type type="struct" name="BinOp">
          <field type="ident" def="register" name=""/>
          <field type="selector" name="Op">
            <prefix value="token"/>
            <item value="Token"/>
          </field>
          <field type="ident" def="Value" name="X"/>
          <field type="ident" def="Value" name="Y"/>
        </type>
        <type type="struct" name="UnOp">
          <field type="ident" def="register" name=""/>
          <field type="selector" name="Op">
            <prefix value="token"/>
            <item value="Token"/>
          </field>
          <field type="ident" def="Value" name="X"/>
          <field type="ident" def="bool" name="CommaOk"/>
        </type>
        <type type="struct" name="ChangeType">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="X"/>
        </type>
        <type type="struct" name="Convert">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="X"/>
        </type>
        <type type="struct" name="ChangeInterface">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="X"/>
        </type>
        <type type="struct" name="MakeInterface">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="X"/>
        </type>
        <type type="struct" name="MakeClosure">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="Fn"/>
          <field type="slice" name="Bindings">
            <elmtype type="ident" def="Value"/>
          </field>
        </type>
        <type type="struct" name="MakeMap">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="Reserve"/>
        </type>
        <type type="struct" name="MakeChan">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="Size"/>
        </type>
        <type type="struct" name="MakeSlice">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="Len"/>
          <field type="ident" def="Value" name="Cap"/>
        </type>
        <type type="struct" name="Slice">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="X"/>
          <field type="ident" def="Value" name="Low"/>
          <field type="ident" def="Value" name="High"/>
          <field type="ident" def="Value" name="Max"/>
        </type>
        <type type="struct" name="FieldAddr">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="X"/>
          <field type="ident" def="int" name="Field"/>
        </type>
        <type type="struct" name="Field">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="X"/>
          <field type="ident" def="int" name="Field"/>
        </type>
        <type type="struct" name="IndexAddr">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="X"/>
          <field type="ident" def="Value" name="Index"/>
        </type>
        <type type="struct" name="Index">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="X"/>
          <field type="ident" def="Value" name="Index"/>
        </type>
        <type type="struct" name="Lookup">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="X"/>
          <field type="ident" def="Value" name="Index"/>
          <field type="ident" def="bool" name="CommaOk"/>
        </type>
        <type type="struct" name="SelectState">
          <field type="selector" name="Dir">
            <prefix value="types"/>
            <item value="ChanDir"/>
          </field>
          <field type="ident" def="Value" name="Chan"/>
          <field type="ident" def="Value" name="Send"/>
          <field type="selector" name="Pos">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
          <field type="selector" name="DebugNode">
            <prefix value="ast"/>
            <item value="Node"/>
          </field>
        </type>
        <type type="struct" name="Select">
          <field type="ident" def="register" name=""/>
          <field type="slice" name="States">
            <elmtype type="pointer">
              <type type="ident" def="SelectState"/>
            </elmtype>
          </field>
          <field type="ident" def="bool" name="Blocking"/>
        </type>
        <type type="struct" name="Range">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="X"/>
        </type>
        <type type="struct" name="Next">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="Iter"/>
          <field type="ident" def="bool" name="IsString"/>
        </type>
        <type type="struct" name="TypeAssert">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="X"/>
          <field type="selector" name="AssertedType">
            <prefix value="types"/>
            <item value="Type"/>
          </field>
          <field type="ident" def="bool" name="CommaOk"/>
        </type>
        <type type="struct" name="Extract">
          <field type="ident" def="register" name=""/>
          <field type="ident" def="Value" name="Tuple"/>
          <field type="ident" def="int" name="Index"/>
        </type>
        <type type="struct" name="Jump">
          <field type="ident" def="anInstruction" name=""/>
        </type>
        <type type="struct" name="If">
          <field type="ident" def="anInstruction" name=""/>
          <field type="ident" def="Value" name="Cond"/>
        </type>
        <type type="struct" name="Return">
          <field type="ident" def="anInstruction" name=""/>
          <field type="slice" name="Results">
            <elmtype type="ident" def="Value"/>
          </field>
          <field type="selector" name="pos">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
        </type>
        <type type="struct" name="RunDefers">
          <field type="ident" def="anInstruction" name=""/>
        </type>
        <type type="struct" name="Panic">
          <field type="ident" def="anInstruction" name=""/>
          <field type="ident" def="Value" name="X"/>
          <field type="selector" name="pos">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
        </type>
        <type type="struct" name="Go">
          <field type="ident" def="anInstruction" name=""/>
          <field type="ident" def="CallCommon" name="Call"/>
          <field type="selector" name="pos">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
        </type>
        <type type="struct" name="Defer">
          <field type="ident" def="anInstruction" name=""/>
          <field type="ident" def="CallCommon" name="Call"/>
          <field type="selector" name="pos">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
        </type>
        <type type="struct" name="Send">
          <field type="ident" def="anInstruction" name=""/>
          <field type="ident" def="Value" name="Chan"/>
          <field type="ident" def="Value" name="X"/>
          <field type="selector" name="pos">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
        </type>
        <type type="struct" name="Store">
          <field type="ident" def="anInstruction" name=""/>
          <field type="ident" def="Value" name="Addr"/>
          <field type="ident" def="Value" name="Val"/>
          <field type="selector" name="pos">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
        </type>
        <type type="struct" name="MapUpdate">
          <field type="ident" def="anInstruction" name=""/>
          <field type="ident" def="Value" name="Map"/>
          <field type="ident" def="Value" name="Key"/>
          <field type="ident" def="Value" name="Value"/>
          <field type="selector" name="pos">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
        </type>
        <type type="struct" name="DebugRef">
          <field type="ident" def="anInstruction" name=""/>
          <field type="selector" name="Expr">
            <prefix value="ast"/>
            <item value="Expr"/>
          </field>
          <field type="selector" name="object">
            <prefix value="types"/>
            <item value="Object"/>
          </field>
          <field type="ident" def="bool" name="IsAddr"/>
          <field type="ident" def="Value" name="X"/>
        </type>
        <type type="struct" name="CallCommon">
          <field type="ident" def="Value" name="Value"/>
          <field type="pointer" name="Method">
            <type type="selector">
              <prefix value="types"/>
              <item value="Func"/>
            </type>
          </field>
          <field type="slice" name="Args">
            <elmtype type="ident" def="Value"/>
          </field>
          <field type="selector" name="pos">
            <prefix value="token"/>
            <item value="Pos"/>
          </field>
        </type>
        <type name="CallInstruction" type="interface">
          <method name="Common">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="CallCommon"/>
              </type>
            </resultsList>
          </method>
          <method name="Value">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Call"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="BuilderMode" type="ident">
          <type type="ident" def="uint"/>
        </type>
      </types>
      <functions>
        <function name="DefaultType">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </resultsList>
        </function>
        <function name="FindTests">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Package"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Package"/>
              </elmtype>
            </type>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Function"/>
              </elmtype>
            </type>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Function"/>
              </elmtype>
            </type>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Function"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="CreateTestMainPackage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="pointer">
                <type type="ident" def="Package"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </resultsList>
        </function>
        <function name="IsInvoke">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CallCommon"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CallCommon"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Signature">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CallCommon"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Signature"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="StaticCallee">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CallCommon"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CallCommon"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Common">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CallCommon"/>
            </type>
          </resultsList>
        </function>
        <function name="Common">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CallCommon"/>
            </type>
          </resultsList>
        </function>
        <function name="Common">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Go"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CallCommon"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Go"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Builtin"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Builtin"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Referrers">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="slice">
                <elmtype type="ident" def="Instruction"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Builtin"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Object">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Builtin"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Object"/>
            </type>
          </resultsList>
        </function>
        <function name="Parent">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Builtin"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FreeVar"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FreeVar"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Referrers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FreeVar"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="slice">
                <elmtype type="ident" def="Instruction"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FreeVar"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Parent">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FreeVar"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Global"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Global"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Parent">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Global"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Global"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Referrers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Global"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="slice">
                <elmtype type="ident" def="Instruction"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Token">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Global"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Token"/>
            </type>
          </resultsList>
        </function>
        <function name="Object">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Global"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Object"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Global"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Package">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Global"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </resultsList>
        </function>
        <function name="RelString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Global"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Token">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Token"/>
            </type>
          </resultsList>
        </function>
        <function name="Object">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Object"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Package">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </resultsList>
        </function>
        <function name="Parent">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </resultsList>
        </function>
        <function name="Referrers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="slice">
                <elmtype type="ident" def="Instruction"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parameter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parameter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Object">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parameter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Object"/>
            </type>
          </resultsList>
        </function>
        <function name="Referrers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parameter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="slice">
                <elmtype type="ident" def="Instruction"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parameter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Parent">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parameter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Alloc"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </resultsList>
        </function>
        <function name="Referrers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Alloc"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="slice">
                <elmtype type="ident" def="Instruction"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Alloc"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="register"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="pointer">
              <type type="ident" def="register"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Referrers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="register"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="slice">
                <elmtype type="ident" def="Instruction"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="register"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Parent">
          <recvList>
            <type type="pointer">
              <type type="ident" def="anInstruction"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </resultsList>
        </function>
        <function name="Block">
          <recvList>
            <type type="pointer">
              <type type="ident" def="anInstruction"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="BasicBlock"/>
            </type>
          </resultsList>
        </function>
        <function name="Referrers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="anInstruction"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="slice">
                <elmtype type="ident" def="Instruction"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Type"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Type"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Type"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </resultsList>
        </function>
        <function name="Token">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Type"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Token"/>
            </type>
          </resultsList>
        </function>
        <function name="Object">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Type"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Object"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Type"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Package">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Type"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </resultsList>
        </function>
        <function name="RelString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Type"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NamedConst"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NamedConst"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NamedConst"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NamedConst"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </resultsList>
        </function>
        <function name="Token">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NamedConst"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Token"/>
            </type>
          </resultsList>
        </function>
        <function name="Object">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NamedConst"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Object"/>
            </type>
          </resultsList>
        </function>
        <function name="Package">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NamedConst"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </resultsList>
        </function>
        <function name="RelString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NamedConst"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Func">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </resultsList>
        </function>
        <function name="Var">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Global"/>
            </type>
          </resultsList>
        </function>
        <function name="Const">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="NamedConst"/>
            </type>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Type"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Go"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MapUpdate"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Panic"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Return"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Send"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Store"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="If"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Jump"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RunDefers"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DebugRef"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Alloc"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BinOp"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CallCommon"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Go"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ChangeInterface"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ChangeType"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Convert"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DebugRef"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Extract"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Field"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FieldAddr"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="If"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Index"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IndexAddr"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Lookup"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MakeChan"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MakeClosure"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MakeInterface"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MakeMap"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MakeSlice"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MapUpdate"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Next"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Panic"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Phi"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Range"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Return"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Select"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Send"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Slice"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Store"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TypeAssert"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UnOp"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Builtin"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FreeVar"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Global"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Operands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parameter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Value"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="EnclosingFunction">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="ast"/>
                <item value="Node"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </resultsList>
        </function>
        <function name="HasEnclosingFunction">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="ast"/>
                <item value="Node"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ValueForExpr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Expr"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Package">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </resultsList>
        </function>
        <function name="FuncValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Func"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </resultsList>
        </function>
        <function name="ConstValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Const"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </resultsList>
        </function>
        <function name="VarValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Var"/>
              </type>
            </type>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="ast"/>
                <item value="Node"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parameter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FreeVar"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Builtin"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Alloc"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Phi"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CallCommon"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BinOp"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UnOp"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ChangeType"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Convert"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ChangeInterface"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MakeInterface"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MakeClosure"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MakeSlice"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Slice"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MakeMap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MakeChan"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FieldAddr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Field"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IndexAddr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Index"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Lookup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Range"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Next"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TypeAssert"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Extract"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Jump"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="If"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Go"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Panic"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Return"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Send"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Select"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Store"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MapUpdate"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DebugRef"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="WriteTo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WritePackage">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="bytes"/>
                <item value="Buffer"/>
              </type>
            </type>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Method">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Selection"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </resultsList>
        </function>
        <function name="LookupMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </resultsList>
        </function>
        <function name="TypesWithMethodSets">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="types"/>
                <item value="Type"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="TypesWithMethodSets">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="types"/>
                <item value="Type"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Parent">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BasicBlock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BasicBlock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="SetDebugMode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RelString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="WriteTo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteFunction">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="bytes"/>
                <item value="Buffer"/>
              </type>
            </type>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewFunction">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Signature"/>
              </type>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="ident" def="extentNode"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="End">
          <recvList>
            <type type="ident" def="extentNode"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="Syntax">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
          </resultsList>
        </function>
        <function name="Idom">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BasicBlock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="BasicBlock"/>
            </type>
          </resultsList>
        </function>
        <function name="Dominees">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BasicBlock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="BasicBlock"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Dominates">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BasicBlock"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="BasicBlock"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byDomPreorder"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byDomPreorder"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byDomPreorder"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="DomPreorder">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="BasicBlock"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Create">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="loader"/>
                <item value="Program"/>
              </type>
            </type>
            <type type="ident" def="BuilderMode"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
          </resultsList>
        </function>
        <function name="CreatePackage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="loader"/>
                <item value="PackageInfo"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </resultsList>
        </function>
        <function name="AllPackages">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Package"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="ImportedPackage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </resultsList>
        </function>
        <function name="NewConst">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="exact"/>
              <item value="Value"/>
            </type>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </resultsList>
        </function>
        <function name="RelString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="Type"/>
            </type>
          </resultsList>
        </function>
        <function name="Referrers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="slice">
                <elmtype type="ident" def="Instruction"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Parent">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="IsNil">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Int64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="Uint64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="Float64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Complex128">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Const"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="complex128"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="opaqueType"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="BuildAll">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Program"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Build">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="PrintPackages"/>
        <name value="PrintFunctions"/>
        <name value="LogSource"/>
        <name value="SanityCheckFunctions"/>
        <name value="NaiveForm"/>
        <name value="BuildSerially"/>
        <name value="GlobalDebug"/>
        <name value="BareInits"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/go/buildutil">
      <types/>
      <functions>
        <function name="ParseFile">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="token"/>
                <item value="FileSet"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="build"/>
                <item value="Context"/>
              </type>
            </type>
            <type type="func">
              <paramsList>
                <type type="ident" def="string"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="string"/>
              </resultsList>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="parser"/>
              <item value="Mode"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="File"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ContainingPackage">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="build"/>
                <item value="Context"/>
              </type>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="build"/>
                <item value="Package"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FileExists">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="build"/>
                <item value="Context"/>
              </type>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="OpenFile">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="build"/>
                <item value="Context"/>
              </type>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="ReadCloser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="IsAbsPath">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="build"/>
                <item value="Context"/>
              </type>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="JoinPath">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="build"/>
                <item value="Context"/>
              </type>
            </type>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="IsDir">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="build"/>
                <item value="Context"/>
              </type>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ReadDir">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="build"/>
                <item value="Context"/>
              </type>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="os"/>
                <item value="FileInfo"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SplitPathList">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="build"/>
                <item value="Context"/>
              </type>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="AllPackages">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="build"/>
                <item value="Context"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="ForEachPackage">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="build"/>
                <item value="Context"/>
              </type>
            </type>
            <type type="func">
              <paramsList>
                <type type="ident" def="string"/>
                <type type="ident" def="error"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/go/ssa/ssautil">
      <types>
        <type type="struct" name="ConstCase">
          <field type="pointer" name="Block">
            <type type="selector">
              <prefix value="ssa"/>
              <item value="BasicBlock"/>
            </type>
          </field>
          <field type="pointer" name="Body">
            <type type="selector">
              <prefix value="ssa"/>
              <item value="BasicBlock"/>
            </type>
          </field>
          <field type="pointer" name="Value">
            <type type="selector">
              <prefix value="ssa"/>
              <item value="Const"/>
            </type>
          </field>
        </type>
        <type type="struct" name="TypeCase">
          <field type="pointer" name="Block">
            <type type="selector">
              <prefix value="ssa"/>
              <item value="BasicBlock"/>
            </type>
          </field>
          <field type="pointer" name="Body">
            <type type="selector">
              <prefix value="ssa"/>
              <item value="BasicBlock"/>
            </type>
          </field>
          <field type="selector" name="Type">
            <prefix value="types"/>
            <item value="Type"/>
          </field>
          <field type="selector" name="Binding">
            <prefix value="ssa"/>
            <item value="Value"/>
          </field>
        </type>
        <type type="struct" name="Switch">
          <field type="pointer" name="Start">
            <type type="selector">
              <prefix value="ssa"/>
              <item value="BasicBlock"/>
            </type>
          </field>
          <field type="selector" name="X">
            <prefix value="ssa"/>
            <item value="Value"/>
          </field>
          <field type="slice" name="ConstCases">
            <elmtype type="ident" def="ConstCase"/>
          </field>
          <field type="slice" name="TypeCases">
            <elmtype type="ident" def="TypeCase"/>
          </field>
          <field type="pointer" name="Default">
            <type type="selector">
              <prefix value="ssa"/>
              <item value="BasicBlock"/>
            </type>
          </field>
        </type>
      </types>
      <functions>
        <function name="AllFunctions">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ssa"/>
                <item value="Program"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="map">
              <keytype type="pointer">
                <type type="selector">
                  <prefix value="ssa"/>
                  <item value="Function"/>
                </type>
              </keytype>
              <valtype type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Switch"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Switches">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ssa"/>
                <item value="Function"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Switch"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/godoc/vfs/mapfs">
      <types/>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="vfs"/>
              <item value="FileSystem"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="mapFS"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="mapFS"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Open">
          <recvList>
            <type type="ident" def="mapFS"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="vfs"/>
              <item value="ReadSeekCloser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Lstat">
          <recvList>
            <type type="ident" def="mapFS"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileInfo"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Stat">
          <recvList>
            <type type="ident" def="mapFS"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileInfo"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadDir">
          <recvList>
            <type type="ident" def="mapFS"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="os"/>
                <item value="FileInfo"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="IsDir">
          <recvList>
            <type type="ident" def="mapFI"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ModTime">
          <recvList>
            <type type="ident" def="mapFI"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </resultsList>
        </function>
        <function name="Mode">
          <recvList>
            <type type="ident" def="mapFI"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileMode"/>
            </type>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="mapFI"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="ident" def="mapFI"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="Sys">
          <recvList>
            <type type="ident" def="mapFI"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="nopCloser"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/godoc/vfs/gatefs">
      <types/>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="vfs"/>
              <item value="FileSystem"/>
            </type>
            <type type="channel" dir="3">
              <type type="ident" def="bool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="vfs"/>
              <item value="FileSystem"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="gatefs"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Open">
          <recvList>
            <type type="ident" def="gatefs"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="vfs"/>
              <item value="ReadSeekCloser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Lstat">
          <recvList>
            <type type="ident" def="gatefs"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileInfo"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Stat">
          <recvList>
            <type type="ident" def="gatefs"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileInfo"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadDir">
          <recvList>
            <type type="ident" def="gatefs"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="os"/>
                <item value="FileInfo"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="ident" def="gatef"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="ident" def="gatef"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="gatef"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/go/callgraph">
      <types>
        <type type="struct" name="Graph">
          <field type="pointer" name="Root">
            <type type="ident" def="Node"/>
          </field>
          <field type="map" name="Nodes">
            <keytype type="pointer">
              <type type="selector">
                <prefix value="ssa"/>
                <item value="Function"/>
              </type>
            </keytype>
            <valtype type="pointer">
              <type type="ident" def="Node"/>
            </valtype>
          </field>
        </type>
        <type type="struct" name="Node">
          <field type="pointer" name="Func">
            <type type="selector">
              <prefix value="ssa"/>
              <item value="Function"/>
            </type>
          </field>
          <field type="ident" def="int" name="ID"/>
          <field type="slice" name="In">
            <elmtype type="pointer">
              <type type="ident" def="Edge"/>
            </elmtype>
          </field>
          <field type="slice" name="Out">
            <elmtype type="pointer">
              <type type="ident" def="Edge"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="Edge">
          <field type="pointer" name="Caller">
            <type type="ident" def="Node"/>
          </field>
          <field type="selector" name="Site">
            <prefix value="ssa"/>
            <item value="CallInstruction"/>
          </field>
          <field type="pointer" name="Callee">
            <type type="ident" def="Node"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="CalleesOf">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="map">
              <keytype type="pointer">
                <type type="ident" def="Node"/>
              </keytype>
              <valtype type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="GraphVisitEdges">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Graph"/>
            </type>
            <type type="func">
              <paramsList>
                <type type="pointer">
                  <type type="ident" def="Edge"/>
                </type>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PathSearch">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
            <type type="func">
              <paramsList>
                <type type="pointer">
                  <type type="ident" def="Node"/>
                </type>
              </paramsList>
              <resultsList>
                <type type="ident" def="bool"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Edge"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="DeleteSyntheticNodes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Graph"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="DeleteNode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Graph"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ssa"/>
                <item value="Function"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Graph"/>
            </type>
          </resultsList>
        </function>
        <function name="CreateNode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Graph"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ssa"/>
                <item value="Function"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Edge"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="ident" def="Edge"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="ident" def="Edge"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="token"/>
              <item value="Pos"/>
            </type>
          </resultsList>
        </function>
        <function name="AddEdge">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
            <type type="selector">
              <prefix value="ssa"/>
              <item value="CallInstruction"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/godoc/vfs/zipfs">
      <types/>
      <functions>
        <function name="Name">
          <recvList>
            <type type="ident" def="zipFI"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="ident" def="zipFI"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="ModTime">
          <recvList>
            <type type="ident" def="zipFI"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </resultsList>
        </function>
        <function name="Mode">
          <recvList>
            <type type="ident" def="zipFI"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileMode"/>
            </type>
          </resultsList>
        </function>
        <function name="IsDir">
          <recvList>
            <type type="ident" def="zipFI"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Sys">
          <recvList>
            <type type="ident" def="zipFI"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="zipFS"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="zipFS"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Open">
          <recvList>
            <type type="pointer">
              <type type="ident" def="zipFS"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="vfs"/>
              <item value="ReadSeekCloser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="zipSeek"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Lstat">
          <recvList>
            <type type="pointer">
              <type type="ident" def="zipFS"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileInfo"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Stat">
          <recvList>
            <type type="pointer">
              <type type="ident" def="zipFS"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileInfo"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadDir">
          <recvList>
            <type type="pointer">
              <type type="ident" def="zipFS"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="os"/>
                <item value="FileInfo"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="zip"/>
                <item value="ReadCloser"/>
              </type>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="vfs"/>
              <item value="FileSystem"/>
            </type>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="zipList"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="zipList"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="zipList"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/go/loader/testdata">
      <types/>
      <functions/>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/go/vcs">
      <types>
        <type type="struct" name="Cmd">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Cmd"/>
          <field type="ident" def="string" name="CreateCmd"/>
          <field type="ident" def="string" name="DownloadCmd"/>
          <field type="slice" name="TagCmd">
            <elmtype type="ident" def="TagCmd"/>
          </field>
          <field type="slice" name="TagLookupCmd">
            <elmtype type="ident" def="TagCmd"/>
          </field>
          <field type="ident" def="string" name="TagSyncCmd"/>
          <field type="ident" def="string" name="TagSyncDefault"/>
          <field type="ident" def="string" name="LogCmd"/>
          <field type="slice" name="Scheme">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="string" name="PingCmd"/>
        </type>
        <type type="struct" name="TagCmd">
          <field type="ident" def="string" name="Cmd"/>
          <field type="ident" def="string" name="Pattern"/>
        </type>
        <type type="struct" name="RepoRoot">
          <field type="pointer" name="VCS">
            <type type="ident" def="Cmd"/>
          </field>
          <field type="ident" def="string" name="Repo"/>
          <field type="ident" def="string" name="Root"/>
        </type>
      </types>
      <functions>
        <function name="ByCmd">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Cmd"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cmd"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Ping">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cmd"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Create">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cmd"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CreateAtRev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cmd"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Download">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cmd"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Tags">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cmd"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="TagSync">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cmd"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Log">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cmd"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="LogAtRev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cmd"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FromDir">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Cmd"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RepoRootForImportPath">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RepoRoot"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RepoRootForImportPathStatic">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RepoRoot"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RepoRootForImportDynamic">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RepoRoot"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Verbose"/>
        <name value="ShowCmd"/>
      </names>
    </package>
    <package importpath="golang.org/x/tools/go/callgraph/static">
      <types/>
      <functions>
        <function name="CallGraph">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ssa"/>
                <item value="Program"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="callgraph"/>
                <item value="Graph"/>
              </type>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/refactor/satisfy">
      <types>
        <type type="struct" name="Constraint">
          <field type="selector" name="LHS">
            <prefix value="types"/>
            <item value="Type"/>
          </field>
          <field type="selector" name="RHS">
            <prefix value="types"/>
            <item value="Type"/>
          </field>
        </type>
        <type type="struct" name="Finder">
          <field type="map" name="Result">
            <keytype type="ident" def="Constraint"/>
            <valtype type="ident" def="bool"/>
          </field>
          <field type="selector" name="msetcache">
            <prefix value="types"/>
            <item value="MethodSetCache"/>
          </field>
          <field type="pointer" name="info">
            <type type="selector">
              <prefix value="types"/>
              <item value="Info"/>
            </type>
          </field>
          <field type="pointer" name="sig">
            <type type="selector">
              <prefix value="types"/>
              <item value="Signature"/>
            </type>
          </field>
        </type>
      </types>
      <functions>
        <function name="Find">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Finder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Info"/>
              </type>
            </type>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="ast"/>
                  <item value="File"/>
                </type>
              </elmtype>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/tools/refactor/eg">
      <types>
        <type type="struct" name="Transformer">
          <field type="pointer" name="fset">
            <type type="selector">
              <prefix value="token"/>
              <item value="FileSet"/>
            </type>
          </field>
          <field type="ident" def="bool" name="verbose"/>
          <field type="selector" name="info">
            <prefix value="loader"/>
            <item value="PackageInfo"/>
          </field>
          <field type="map" name="seenInfos">
            <keytype type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Info"/>
              </type>
            </keytype>
            <valtype type="ident" def="bool"/>
          </field>
          <field type="map" name="wildcards">
            <keytype type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Var"/>
              </type>
            </keytype>
            <valtype type="ident" def="bool"/>
          </field>
          <field type="map" name="env">
            <keytype type="ident" def="string"/>
            <valtype type="selector">
              <prefix value="ast"/>
              <item value="Expr"/>
            </valtype>
          </field>
          <field type="map" name="importedObjs">
            <keytype type="selector">
              <prefix value="types"/>
              <item value="Object"/>
            </keytype>
            <valtype type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="SelectorExpr"/>
              </type>
            </valtype>
          </field>
          <field type="selector" name="before">
            <prefix value="ast"/>
            <item value="Expr"/>
          </field>
          <field type="selector" name="after">
            <prefix value="ast"/>
            <item value="Expr"/>
          </field>
          <field type="ident" def="bool" name="allowWildcards"/>
          <field type="ident" def="int" name="nsubsts"/>
          <field type="pointer" name="currentPkg">
            <type type="selector">
              <prefix value="types"/>
              <item value="Package"/>
            </type>
          </field>
        </type>
      </types>
      <functions>
        <function name="Transform">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Transformer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Info"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="Package"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="File"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="NewTransformer">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="token"/>
                <item value="FileSet"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="loader"/>
                <item value="PackageInfo"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Transformer"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteAST">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="token"/>
                <item value="FileSet"/>
              </type>
            </type>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="File"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Help"/>
      </names>
    </package>
  </packages>
  <imports>
    <import path="fmt"/>
    <import path="go/ast"/>
    <import path="go/token"/>
    <import path="golang.org/x/tools/go/types"/>
    <import path="os"/>
    <import path="path/filepath"/>
    <import path="reflect"/>
    <import path="runtime"/>
    <import path="strings"/>
    <import path="unicode"/>
    <import path="bytes"/>
    <import path="go/build"/>
    <import path="go/parser"/>
    <import path="strconv"/>
    <import path="golang.org/x/tools/go/buildutil"/>
    <import path="golang.org/x/tools/go/loader"/>
    <import path="go/format"/>
    <import path="io"/>
    <import path="io/ioutil"/>
    <import path="regexp"/>
    <import path="testing"/>
    <import path="time"/>
    <import path="errors"/>
    <import path="sort"/>
    <import path="golang.org/x/tools/refactor/importgraph"/>
    <import path="golang.org/x/tools/refactor/satisfy"/>
    <import path="golang.org/x/tools/refactor/lexical"/>
    <import path="crypto/hmac"/>
    <import path="sync"/>
    <import path="golang.org/x/tools/astutil"/>
    <import path="log"/>
    <import path="golang.org/x/tools/go/exact"/>
    <import path="flag"/>
    <import path="os/exec"/>
    <import path="golang.org/x/tools/refactor/eg"/>
    <import path="go/printer"/>
    <import path="html"/>
    <import path="html/template"/>
    <import path="unicode/utf8"/>
    <import path="bufio"/>
    <import path="net/url"/>
    <import path="net/http"/>
    <import path="appengine"/>
    <import path="appengine/urlfetch"/>
    <import path="encoding/json"/>
    <import path="net"/>
    <import path="golang.org/x/net/websocket"/>
    <import path="golang.org/x/tools/go/ssa"/>
    <import path="golang.org/x/tools/go/ssa/ssautil"/>
    <import path="golang.org/x/tools/oracle/serial"/>
    <import path="golang.org/x/tools/go/pointer"/>
    <import path="golang.org/x/tools/oracle"/>
    <import path="golang.org/x/tools/go/types/typeutil"/>
    <import path="golang.org/x/tools/go/callgraph"/>
    <import path="path"/>
    <import path="golang.org/x/tools/godoc/vfs"/>
    <import path="text/scanner"/>
    <import path="expvar"/>
    <import path="net/http/httptest"/>
    <import path="text/template"/>
    <import path="go/doc"/>
    <import path="golang.org/x/tools/godoc/analysis"/>
    <import path="golang.org/x/tools/godoc/util"/>
    <import path="golang.org/x/tools/godoc/vfs/httpfs"/>
    <import path="golang.org/x/tools/godoc/vfs/mapfs"/>
    <import path="encoding/gob"/>
    <import path="index/suffixarray"/>
    <import path="go/scanner"/>
    <import path="archive/zip"/>
    <import path="math/big"/>
    <import path="encoding/xml"/>
    <import path="golang.org/x/tools/go/gcimporter"/>
    <import path="container/heap"/>
    <import path="math"/>
    <import path="sync/atomic"/>
    <import path="unsafe"/>
    <import path="golang.org/x/tools/go/ssa/interp"/>
    <import path="syscall"/>
    <import path="golang.org/x/tools/container/intsets"/>
    <import path="runtime/debug"/>
    <import path="encoding/binary"/>
    <import path="debug/elf"/>
    <import path="golang.org/x/tools/go/importer"/>
    <import path="golang.org/x/tools/go/callgraph/static"/>
    <import path="golang.org/x/tools/go/callgraph/rta"/>
    <import path="golang.org/x/tools/go/callgraph/cha"/>
    <import path="golang.org/x/tools/go/vcs"/>
    <import path="appengine/datastore"/>
    <import path="appengine/memcache"/>
    <import path="cache"/>
    <import path="appengine/delay"/>
    <import path="appengine/mail"/>
    <import path="key"/>
    <import path="crypto/md5"/>
    <import path="compress/gzip"/>
    <import path="crypto/sha1"/>
    <import path="math/rand"/>
    <import path="golang.org/x/tools/cmd/vet/whitelist"/>
    <import path="C"/>
    <import path="runtime/pprof"/>
    <import path="golang.org/x/tools/godoc/static"/>
    <import path="golang.org/x/tools/playground/socket"/>
    <import path="golang.org/x/tools/present"/>
    <import path="mime"/>
    <import path="golang.org/x/tools/playground"/>
    <import path="golang.org/x/net/html"/>
    <import path="golang.org/x/net/html/atom"/>
    <import path="golang.org/x/tools/go/gccgoimporter"/>
    <import path="golang.org/x/tools/refactor/rename"/>
    <import path="golang.org/x/tools/imports"/>
    <import path="net/http/pprof"/>
    <import path="golang.org/x/tools/godoc"/>
    <import path="golang.org/x/tools/godoc/vfs/gatefs"/>
    <import path="golang.org/x/tools/godoc/vfs/zipfs"/>
    <import path="golang.org/x/tools/godoc/redirect"/>
    <import path="golang.org/x/tools/blog"/>
    <import path="golang.org/x/tools/cover"/>
    <import path="text/tabwriter"/>
    <import path="golang.org/x/tools/blog/atom"/>
  </imports>
</project>
