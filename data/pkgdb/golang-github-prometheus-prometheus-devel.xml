<?xml version='1.0' encoding='ASCII'?>
<project url="" commit="commit" nvr="golang-github-prometheus-prometheus-0-0.1.git4e6a807.fc23">
  <packages>
    <package importpath="github.com/prometheus/prometheus/web">
      <types>
        <type type="struct" name="WebService">
          <field type="pointer" name="StatusHandler">
            <type type="ident" def="PrometheusStatusHandler"/>
          </field>
          <field type="pointer" name="MetricsHandler">
            <type type="selector">
              <prefix value="api"/>
              <item value="MetricsService"/>
            </type>
          </field>
          <field type="pointer" name="AlertsHandler">
            <type type="ident" def="AlertsHandler"/>
          </field>
          <field type="pointer" name="ConsolesHandler">
            <type type="ident" def="ConsolesHandler"/>
          </field>
          <field type="func" name="QuitDelegate">
            <paramsList/>
            <resultsList/>
          </field>
        </type>
        <type type="struct" name="PrometheusStatusHandler">
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="map" name="BuildInfo">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="ident" def="string" name="Config"/>
          <field type="map" name="Flags">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="selector" name="RuleManager">
            <prefix value="manager"/>
            <item value="RuleManager"/>
          </field>
          <field type="map" name="TargetPools">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="selector">
                <prefix value="retrieval"/>
                <item value="TargetPool"/>
              </type>
            </valtype>
          </field>
          <field type="selector" name="Birth">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
        </type>
        <type type="struct" name="ConsolesHandler">
          <field type="selector" name="Storage">
            <prefix value="local"/>
            <item value="Storage"/>
          </field>
        </type>
        <type type="struct" name="AlertStatus">
          <field type="slice" name="AlertingRules">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="rules"/>
                <item value="AlertingRule"/>
              </type>
            </elmtype>
          </field>
          <field type="map" name="AlertStateToRowClass">
            <keytype type="selector">
              <prefix value="rules"/>
              <item value="AlertState"/>
            </keytype>
            <valtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="AlertsHandler">
          <field type="selector" name="RuleManager">
            <prefix value="manager"/>
            <item value="RuleManager"/>
          </field>
          <field type="selector" name="mutex">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="ServeForever">
          <recvList>
            <type type="ident" def="WebService"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="MustBuildServerURL">
          <recvList/>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="ServeHTTP">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PrometheusStatusHandler"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="ServeHTTP">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ConsolesHandler"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byAlertStateSorter"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="int"/>
          </returnsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byAlertStateSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
          </returnsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byAlertStateSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="ServeHTTP">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AlertsHandler"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/utility/test">
      <types>
        <type name="Closer" type="interface">
          <method name="Close">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type name="TemporaryDirectory" type="interface">
          <method name="Path">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type name="T" type="interface">
          <method name="Fatal">
            <paramsList>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Fatalf">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
      </types>
      <functions>
        <function name="Now">
          <recvList>
            <type type="pointer">
              <type type="ident" def="instantProvider"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </returnsList>
        </function>
        <function name="NewInstantProvider">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="time"/>
                <item value="Time"/>
              </elmtype>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="utility"/>
              <item value="InstantProvider"/>
            </type>
          </returnsList>
        </function>
        <function name="ErrorEqual">
          <recvList/>
          <paramsList>
            <type type="ident" def="error"/>
            <type type="ident" def="error"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
          </returnsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="nilCloser"/>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="callbackCloser"/>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="NewCallbackCloser">
          <recvList/>
          <paramsList>
            <type type="func">
              <paramsList/>
              <resultsList/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="callbackCloser"/>
            </type>
          </returnsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="temporaryDirectory"/>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="Path">
          <recvList>
            <type type="ident" def="temporaryDirectory"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="NewTemporaryDirectory">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="T"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="TemporaryDirectory"/>
          </returnsList>
        </function>
      </functions>
      <names>
        <name value="NilCloser"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/storage/local/flock">
      <types>
        <type name="Releaser" type="interface">
          <method name="Release">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="windowsLock"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="unixLock"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="unixLock"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="plan9Lock"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="Releaser"/>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/web/httputils">
      <types>
        <type type="struct" name="CompressionHandler">
          <field type="selector" name="Handler">
            <prefix value="http"/>
            <item value="Handler"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="GetQueryParams">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="url"/>
              <item value="Values"/>
            </type>
          </returnsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="compressedResponseWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="compressedResponseWriter"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="ServeHTTP">
          <recvList>
            <type type="ident" def="CompressionHandler"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/storage/remote">
      <types>
        <type name="TSDBClient" type="interface">
          <method name="Store">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Samples"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="TSDBQueueManager">
          <field type="ident" def="TSDBClient" name="tsdb"/>
          <field type="chan" dir="3" name="queue">
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Samples"/>
            </type>
          </field>
          <field type="selector" name="pendingSamples">
            <prefix value="clientmodel"/>
            <item value="Samples"/>
          </field>
          <field type="chan" dir="3" name="sendSemaphore">
            <type type="ident" def="bool"/>
          </field>
          <field type="chan" dir="3" name="drained">
            <type type="ident" def="bool"/>
          </field>
          <field type="pointer" name="samplesCount">
            <type type="selector">
              <prefix value="prometheus"/>
              <item value="CounterVec"/>
            </type>
          </field>
          <field type="selector" name="sendLatency">
            <prefix value="prometheus"/>
            <item value="Summary"/>
          </field>
          <field type="selector" name="sendErrors">
            <prefix value="prometheus"/>
            <item value="Counter"/>
          </field>
          <field type="selector" name="queueLength">
            <prefix value="prometheus"/>
            <item value="Gauge"/>
          </field>
          <field type="selector" name="queueCapacity">
            <prefix value="prometheus"/>
            <item value="Metric"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewTSDBQueueManager">
          <recvList/>
          <paramsList>
            <type type="ident" def="TSDBClient"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="TSDBQueueManager"/>
            </type>
          </returnsList>
        </function>
        <function name="Queue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TSDBQueueManager"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Samples"/>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TSDBQueueManager"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TSDBQueueManager"/>
            </type>
          </recvList>
          <paramsList>
            <type type="chan" dir="1">
              <type type="pointer">
                <type type="selector">
                  <prefix value="prometheus"/>
                  <item value="Desc"/>
                </type>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TSDBQueueManager"/>
            </type>
          </recvList>
          <paramsList>
            <type type="chan" dir="1">
              <type type="selector">
                <prefix value="prometheus"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TSDBQueueManager"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/web/blob">
      <types>
        <type type="struct" name="Handler"/>
      </types>
      <functions>
        <function name="GetFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="ServeHTTP">
          <recvList>
            <type type="ident" def="Handler"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
      </functions>
      <names>
        <name value="TemplateFiles"/>
        <name value="StaticFiles"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/storage/local/codable">
      <types>
        <type name="Metric" type="selector">
          <prefix value="clientmodel"/>
          <item value="Metric"/>
        </type>
        <type name="Fingerprint" type="selector">
          <prefix value="clientmodel"/>
          <item value="Fingerprint"/>
        </type>
        <type name="FingerprintSet" type="map">
          <keytype type="selector">
            <prefix value="clientmodel"/>
            <item value="Fingerprint"/>
          </keytype>
          <type type="struct" name=""/>
        </type>
        <type name="Fingerprints" type="selector">
          <prefix value="clientmodel"/>
          <item value="Fingerprints"/>
        </type>
        <type name="LabelPair" type="selector">
          <prefix value="metric"/>
          <item value="LabelPair"/>
        </type>
        <type name="LabelName" type="selector">
          <prefix value="clientmodel"/>
          <item value="LabelName"/>
        </type>
        <type name="LabelValueSet" type="map">
          <keytype type="selector">
            <prefix value="clientmodel"/>
            <item value="LabelValue"/>
          </keytype>
          <type type="struct" name=""/>
        </type>
        <type name="LabelValues" type="selector">
          <prefix value="clientmodel"/>
          <item value="LabelValues"/>
        </type>
        <type type="struct" name="TimeRange">
          <field type="selector" name="First">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
          <field type="selector" name="Last">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="EncodeVarint">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="int64"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="EncodeUint64">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="uint64"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="DecodeUint64">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="Metric"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalFromReader">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="byteReader"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="Fingerprint"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Fingerprint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="FingerprintSet"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FingerprintSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="Fingerprints"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Fingerprints"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="LabelPair"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="LabelName"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelName"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="LabelValueSet"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelValueSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="LabelValues"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelValues"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="TimeRange"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TimeRange"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/storage/local/index">
      <types>
        <type type="struct" name="LevelDB">
          <field type="pointer" name="storage">
            <type type="selector">
              <prefix value="leveldb"/>
              <item value="DB"/>
            </type>
          </field>
          <field type="pointer" name="readOpts">
            <type type="selector">
              <prefix value="leveldb_opt"/>
              <item value="ReadOptions"/>
            </type>
          </field>
          <field type="pointer" name="writeOpts">
            <type type="selector">
              <prefix value="leveldb_opt"/>
              <item value="WriteOptions"/>
            </type>
          </field>
        </type>
        <type type="struct" name="LevelDBOptions">
          <field type="ident" def="string" name="Path"/>
          <field type="ident" def="int" name="CacheSizeBytes"/>
        </type>
        <type type="struct" name="LevelDBBatch">
          <field type="pointer" name="batch">
            <type type="selector">
              <prefix value="leveldb"/>
              <item value="Batch"/>
            </type>
          </field>
        </type>
        <type name="KeyValueStore" type="interface">
          <method name="Put">
            <paramsList>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryMarshaler"/>
              </type>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryMarshaler"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Get">
            <paramsList>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryMarshaler"/>
              </type>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryUnmarshaler"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Has">
            <paramsList>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryMarshaler"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Delete">
            <paramsList>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryMarshaler"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="NewBatch">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Batch"/>
            </resultsList>
          </method>
          <method name="Commit">
            <paramsList>
              <type type="ident" def="Batch"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="ForEach">
            <paramsList>
              <type type="func">
                <paramsList>
                  <type type="ident" def="KeyValueAccessor"/>
                </paramsList>
                <resultsList>
                  <type type="ident" def="error"/>
                </resultsList>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Close">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="KeyValueAccessor" type="interface">
          <method name="Key">
            <paramsList>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryUnmarshaler"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Value">
            <paramsList>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryUnmarshaler"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Batch" type="interface">
          <method name="Put">
            <paramsList>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryMarshaler"/>
              </type>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryMarshaler"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Delete">
            <paramsList>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryMarshaler"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Reset">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type name="FingerprintMetricMapping" type="map">
          <keytype type="selector">
            <prefix value="clientmodel"/>
            <item value="Fingerprint"/>
          </keytype>
          <valtype type="selector">
            <prefix value="clientmodel"/>
            <item value="Metric"/>
          </valtype>
        </type>
        <type type="struct" name="FingerprintMetricIndex">
          <field type="ident" def="KeyValueStore" name=""/>
        </type>
        <type name="LabelNameLabelValuesMapping" type="map">
          <keytype type="selector">
            <prefix value="clientmodel"/>
            <item value="LabelName"/>
          </keytype>
          <valtype type="selector">
            <prefix value="codable"/>
            <item value="LabelValueSet"/>
          </valtype>
        </type>
        <type type="struct" name="LabelNameLabelValuesIndex">
          <field type="ident" def="KeyValueStore" name=""/>
        </type>
        <type name="LabelPairFingerprintsMapping" type="map">
          <keytype type="selector">
            <prefix value="metric"/>
            <item value="LabelPair"/>
          </keytype>
          <valtype type="selector">
            <prefix value="codable"/>
            <item value="FingerprintSet"/>
          </valtype>
        </type>
        <type type="struct" name="LabelPairFingerprintIndex">
          <field type="ident" def="KeyValueStore" name=""/>
        </type>
        <type type="struct" name="FingerprintTimeRangeIndex">
          <field type="ident" def="KeyValueStore" name=""/>
        </type>
      </types>
      <functions>
        <function name="NewLevelDB">
          <recvList/>
          <paramsList>
            <type type="ident" def="LevelDBOptions"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="KeyValueStore"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="NewBatch">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDB"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="Batch"/>
          </returnsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDB"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryMarshaler"/>
            </type>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryUnmarshaler"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Has">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryMarshaler"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryMarshaler"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryMarshaler"/>
            </type>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryMarshaler"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Commit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Batch"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="ForEach">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="KeyValueAccessor"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDBBatch"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryMarshaler"/>
            </type>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryMarshaler"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDBBatch"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryMarshaler"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDBBatch"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="levelDBKeyValueAccessor"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryUnmarshaler"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="levelDBKeyValueAccessor"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryUnmarshaler"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="IndexBatch">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FingerprintMetricIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="FingerprintMetricMapping"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnindexBatch">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FingerprintMetricIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="FingerprintMetricMapping"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Lookup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FingerprintMetricIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Metric"/>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="NewFingerprintMetricIndex">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="FingerprintMetricIndex"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="IndexBatch">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelNameLabelValuesIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="LabelNameLabelValuesMapping"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Lookup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelNameLabelValuesIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelName"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelValues"/>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="LookupSet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelNameLabelValuesIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelName"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="map">
              <keytype type="selector">
                <prefix value="clientmodel"/>
                <item value="LabelValue"/>
              </keytype>
              <type type="struct" name=""/>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="NewLabelNameLabelValuesIndex">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="LabelNameLabelValuesIndex"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="DeleteLabelNameLabelValuesIndex">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="IndexBatch">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPairFingerprintIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="LabelPairFingerprintsMapping"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Lookup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPairFingerprintIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="LabelPair"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprints"/>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="LookupSet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPairFingerprintIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="LabelPair"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="map">
              <keytype type="selector">
                <prefix value="clientmodel"/>
                <item value="Fingerprint"/>
              </keytype>
              <type type="struct" name=""/>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="NewLabelPairFingerprintIndex">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="LabelPairFingerprintIndex"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="DeleteLabelPairFingerprintIndex">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Lookup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FingerprintTimeRangeIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="NewFingerprintTimeRangeIndex">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="FingerprintTimeRangeIndex"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/rules">
      <types>
        <type name="Rule" type="interface">
          <method name="Name">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="EvalRaw">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Timestamp"/>
              </type>
              <type type="selector">
                <prefix value="local"/>
                <item value="Storage"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="ast"/>
                <item value="Vector"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Eval">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Timestamp"/>
              </type>
              <type type="selector">
                <prefix value="local"/>
                <item value="Storage"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="ast"/>
                <item value="Vector"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="ToDotGraph">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="HTMLSnippet">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="template"/>
                <item value="HTML"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="RecordingRule">
          <field type="ident" def="string" name="name"/>
          <field type="selector" name="vector">
            <prefix value="ast"/>
            <item value="VectorNode"/>
          </field>
          <field type="selector" name="labels">
            <prefix value="clientmodel"/>
            <item value="LabelSet"/>
          </field>
          <field type="ident" def="bool" name="permanent"/>
        </type>
        <type type="struct" name="RulesLexer">
          <field type="slice" name="errors">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="int" name="startToken"/>
          <field type="slice" name="parsedRules">
            <elmtype type="ident" def="Rule"/>
          </field>
          <field type="selector" name="parsedExpr">
            <prefix value="ast"/>
            <item value="Node"/>
          </field>
          <field type="ident" def="byte" name="current"/>
          <field type="slice" name="buf">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="pointer" name="src">
            <type type="selector">
              <prefix value="bufio"/>
              <item value="Reader"/>
            </type>
          </field>
          <field type="ident" def="bool" name="empty"/>
          <field type="ident" def="int" name="line"/>
          <field type="ident" def="int" name="pos"/>
        </type>
        <type name="AlertState" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="Alert">
          <field type="ident" def="string" name="Name"/>
          <field type="selector" name="Labels">
            <prefix value="clientmodel"/>
            <item value="LabelSet"/>
          </field>
          <field type="ident" def="AlertState" name="State"/>
          <field type="selector" name="ActiveSince">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
          <field type="selector" name="Value">
            <prefix value="clientmodel"/>
            <item value="SampleValue"/>
          </field>
        </type>
        <type type="struct" name="AlertingRule">
          <field type="ident" def="string" name="name"/>
          <field type="selector" name="Vector">
            <prefix value="ast"/>
            <item value="VectorNode"/>
          </field>
          <field type="selector" name="holdDuration">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="Labels">
            <prefix value="clientmodel"/>
            <item value="LabelSet"/>
          </field>
          <field type="ident" def="string" name="Summary"/>
          <field type="ident" def="string" name="Description"/>
          <field type="selector" name="mutex">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="map" name="activeAlerts">
            <keytype type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </keytype>
            <valtype type="pointer">
              <type type="ident" def="Alert"/>
            </valtype>
          </field>
        </type>
      </types>
      <functions>
        <function name="Name">
          <recvList>
            <type type="ident" def="RecordingRule"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="EvalRaw">
          <recvList>
            <type type="ident" def="RecordingRule"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="local"/>
              <item value="Storage"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Vector"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Eval">
          <recvList>
            <type type="ident" def="RecordingRule"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="local"/>
              <item value="Storage"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Vector"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="ToDotGraph">
          <recvList>
            <type type="ident" def="RecordingRule"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="RecordingRule"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="HTMLSnippet">
          <recvList>
            <type type="ident" def="RecordingRule"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="template"/>
              <item value="HTML"/>
            </type>
          </returnsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RulesLexer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="LoadRulesFromReader">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="Rule"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="LoadRulesFromString">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="Rule"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="LoadRulesFromFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="Rule"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="LoadExprFromReader">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="LoadExprFromString">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="LoadExprFromFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Lex">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RulesLexer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="yySymType"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="int"/>
          </returnsList>
        </function>
        <function name="CreateRecordingRule">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </type>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="RecordingRule"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="CreateAlertingRule">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="AlertingRule"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="NewFunctionCall">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="ast"/>
                <item value="Node"/>
              </elmtype>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="NewVectorAggregation">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelNames"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ast"/>
                <item value="VectorAggregation"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="NewArithExpr">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="NewMatrixSelector">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="MatrixNode"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="TableLinkForExpression">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="GraphLinkForExpression">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="AlertState"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AlertingRule"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="EvalRaw">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AlertingRule"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="local"/>
              <item value="Storage"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Vector"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Eval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AlertingRule"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="local"/>
              <item value="Storage"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Vector"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="ToDotGraph">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AlertingRule"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AlertingRule"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="HTMLSnippet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AlertingRule"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="template"/>
              <item value="HTML"/>
            </type>
          </returnsList>
        </function>
        <function name="State">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AlertingRule"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="AlertState"/>
          </returnsList>
        </function>
        <function name="ActiveAlerts">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AlertingRule"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="Alert"/>
            </type>
          </returnsList>
        </function>
        <function name="NewAlertingRule">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="ast"/>
              <item value="VectorNode"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="AlertingRule"/>
            </type>
          </returnsList>
        </function>
      </functions>
      <names>
        <name value="START_RULES"/>
        <name value="START_EXPRESSION"/>
        <name value="IDENTIFIER"/>
        <name value="STRING"/>
        <name value="DURATION"/>
        <name value="METRICNAME"/>
        <name value="NUMBER"/>
        <name value="PERMANENT"/>
        <name value="GROUP_OP"/>
        <name value="KEEPING_EXTRA"/>
        <name value="AGGR_OP"/>
        <name value="CMP_OP"/>
        <name value="ADDITIVE_OP"/>
        <name value="MULT_OP"/>
        <name value="ALERT"/>
        <name value="IF"/>
        <name value="FOR"/>
        <name value="WITH"/>
        <name value="SUMMARY"/>
        <name value="DESCRIPTION"/>
        <name value="AlertMetricName"/>
        <name value="AlertNameLabel"/>
        <name value="AlertStateLabel"/>
        <name value="Inactive"/>
        <name value="Pending"/>
        <name value="Firing"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/rules/ast">
      <types>
        <type name="Visitor" type="interface">
          <method name="Visit">
            <paramsList>
              <type type="ident" def="Node"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type name="FullRangeMap" type="map">
          <keytype type="selector">
            <prefix value="clientmodel"/>
            <item value="Fingerprint"/>
          </keytype>
          <valtype type="selector">
            <prefix value="time"/>
            <item value="Duration"/>
          </valtype>
        </type>
        <type name="IntervalRangeMap" type="map">
          <keytype type="selector">
            <prefix value="clientmodel"/>
            <item value="Fingerprint"/>
          </keytype>
          <valtype type="ident" def="bool"/>
        </type>
        <type type="struct" name="QueryAnalyzer">
          <field type="ident" def="FullRangeMap" name="FullRanges"/>
          <field type="ident" def="IntervalRangeMap" name="IntervalRanges"/>
          <field type="selector" name="storage">
            <prefix value="local"/>
            <item value="Storage"/>
          </field>
        </type>
        <type name="OutputFormat" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="Function">
          <field type="ident" def="string" name="name"/>
          <field type="slice" name="argTypes">
            <elmtype type="ident" def="ExprType"/>
          </field>
          <field type="ident" def="int" name="optionalArgs"/>
          <field type="ident" def="ExprType" name="returnType"/>
          <field type="func" name="callFn">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Timestamp"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="Node"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="interface"/>
            </resultsList>
          </field>
        </type>
        <type type="struct" name="SampleStream">
          <field type="selector" name="Metric">
            <prefix value="clientmodel"/>
            <item value="COWMetric"/>
          </field>
          <field type="selector" name="Values">
            <prefix value="metric"/>
            <item value="Values"/>
          </field>
        </type>
        <type type="struct" name="Sample">
          <field type="selector" name="Metric">
            <prefix value="clientmodel"/>
            <item value="COWMetric"/>
          </field>
          <field type="selector" name="Value">
            <prefix value="clientmodel"/>
            <item value="SampleValue"/>
          </field>
          <field type="selector" name="Timestamp">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
        </type>
        <type name="Vector" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="Sample"/>
          </elmtype>
        </type>
        <type name="Matrix" type="slice">
          <elmtype type="ident" def="SampleStream"/>
        </type>
        <type name="ExprType" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type name="BinOpType" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type name="AggrType" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type name="Nodes" type="slice">
          <elmtype type="ident" def="Node"/>
        </type>
        <type name="Node" type="interface">
          <method name="Type">
            <paramsList/>
            <resultsList>
              <type type="ident" def="ExprType"/>
            </resultsList>
          </method>
          <method name="Children">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Nodes"/>
            </resultsList>
          </method>
          <method name="NodeTreeToDotGraph">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type name="ScalarNode" type="interface">
          <method name="Eval">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Timestamp"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="SampleValue"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="VectorNode" type="interface">
          <method name="Eval">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Timestamp"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="Vector"/>
            </resultsList>
          </method>
        </type>
        <type name="MatrixNode" type="interface">
          <method name="Eval">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Timestamp"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="Matrix"/>
            </resultsList>
          </method>
          <method name="EvalBoundaries">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Timestamp"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="Matrix"/>
            </resultsList>
          </method>
        </type>
        <type name="StringNode" type="interface">
          <method name="Eval">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Timestamp"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="ScalarLiteral">
          <field type="selector" name="value">
            <prefix value="clientmodel"/>
            <item value="SampleValue"/>
          </field>
        </type>
        <type type="struct" name="ScalarFunctionCall">
          <field type="pointer" name="function">
            <type type="ident" def="Function"/>
          </field>
          <field type="ident" def="Nodes" name="args"/>
        </type>
        <type type="struct" name="ScalarArithExpr">
          <field type="ident" def="BinOpType" name="opType"/>
          <field type="ident" def="ScalarNode" name="lhs"/>
          <field type="ident" def="ScalarNode" name="rhs"/>
        </type>
        <type type="struct" name="VectorSelector">
          <field type="selector" name="labelMatchers">
            <prefix value="metric"/>
            <item value="LabelMatchers"/>
          </field>
          <field type="map" name="iterators">
            <keytype type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </keytype>
            <valtype type="selector">
              <prefix value="local"/>
              <item value="SeriesIterator"/>
            </valtype>
          </field>
          <field type="map" name="metrics">
            <keytype type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </keytype>
            <valtype type="selector">
              <prefix value="clientmodel"/>
              <item value="COWMetric"/>
            </valtype>
          </field>
          <field type="selector" name="fingerprints">
            <prefix value="clientmodel"/>
            <item value="Fingerprints"/>
          </field>
        </type>
        <type type="struct" name="VectorFunctionCall">
          <field type="pointer" name="function">
            <type type="ident" def="Function"/>
          </field>
          <field type="ident" def="Nodes" name="args"/>
        </type>
        <type type="struct" name="VectorAggregation">
          <field type="ident" def="AggrType" name="aggrType"/>
          <field type="selector" name="groupBy">
            <prefix value="clientmodel"/>
            <item value="LabelNames"/>
          </field>
          <field type="ident" def="bool" name="keepExtraLabels"/>
          <field type="ident" def="VectorNode" name="vector"/>
        </type>
        <type type="struct" name="VectorArithExpr">
          <field type="ident" def="BinOpType" name="opType"/>
          <field type="ident" def="Node" name="lhs"/>
          <field type="ident" def="Node" name="rhs"/>
        </type>
        <type type="struct" name="MatrixSelector">
          <field type="selector" name="labelMatchers">
            <prefix value="metric"/>
            <item value="LabelMatchers"/>
          </field>
          <field type="map" name="iterators">
            <keytype type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </keytype>
            <valtype type="selector">
              <prefix value="local"/>
              <item value="SeriesIterator"/>
            </valtype>
          </field>
          <field type="map" name="metrics">
            <keytype type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </keytype>
            <valtype type="selector">
              <prefix value="clientmodel"/>
              <item value="COWMetric"/>
            </valtype>
          </field>
          <field type="selector" name="fingerprints">
            <prefix value="clientmodel"/>
            <item value="Fingerprints"/>
          </field>
          <field type="selector" name="interval">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
        </type>
        <type type="struct" name="StringLiteral">
          <field type="ident" def="string" name="str"/>
        </type>
        <type type="struct" name="StringFunctionCall">
          <field type="pointer" name="function">
            <type type="ident" def="Function"/>
          </field>
          <field type="ident" def="Nodes" name="args"/>
        </type>
      </types>
      <functions>
        <function name="Walk">
          <recvList/>
          <paramsList>
            <type type="ident" def="Visitor"/>
            <type type="ident" def="Node"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="NewQueryAnalyzer">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="local"/>
              <item value="Storage"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="QueryAnalyzer"/>
            </type>
          </returnsList>
        </function>
        <function name="Visit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="QueryAnalyzer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Node"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Visit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="iteratorInitializer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Node"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="BinOpType"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="AggrType"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="ExprType"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Vector"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Matrix"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="ErrorToJSON">
          <recvList/>
          <paramsList>
            <type type="ident" def="error"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="TypedValueToJSON">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="EvalToString">
          <recvList/>
          <paramsList>
            <type type="ident" def="Node"/>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="ident" def="OutputFormat"/>
            <type type="selector">
              <prefix value="local"/>
              <item value="Storage"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="stats"/>
                <item value="TimerGroup"/>
              </type>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="EvalToVector">
          <recvList/>
          <paramsList>
            <type type="ident" def="Node"/>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="local"/>
              <item value="Storage"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="stats"/>
                <item value="TimerGroup"/>
              </type>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="Vector"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="NodeTreeToDotGraph">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ScalarLiteral"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="NodeTreeToDotGraph">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ScalarFunctionCall"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="NodeTreeToDotGraph">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ScalarArithExpr"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="NodeTreeToDotGraph">
          <recvList>
            <type type="pointer">
              <type type="ident" def="VectorSelector"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="NodeTreeToDotGraph">
          <recvList>
            <type type="pointer">
              <type type="ident" def="VectorFunctionCall"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="NodeTreeToDotGraph">
          <recvList>
            <type type="pointer">
              <type type="ident" def="VectorAggregation"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="NodeTreeToDotGraph">
          <recvList>
            <type type="pointer">
              <type type="ident" def="VectorArithExpr"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="NodeTreeToDotGraph">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MatrixSelector"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="NodeTreeToDotGraph">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StringLiteral"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="NodeTreeToDotGraph">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StringFunctionCall"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Nodes"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ScalarLiteral"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ScalarFunctionCall"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ScalarArithExpr"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="VectorSelector"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="VectorFunctionCall"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="VectorAggregation"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="VectorArithExpr"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MatrixSelector"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StringLiteral"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StringFunctionCall"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="CheckArgTypes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="Node"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="vectorByValueHeap"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="int"/>
          </returnsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="vectorByValueHeap"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
          </returnsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="vectorByValueHeap"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Push">
          <recvList>
            <type type="pointer">
              <type type="ident" def="vectorByValueHeap"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Pop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="vectorByValueHeap"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="interface"/>
          </returnsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="reverseHeap"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
          </returnsList>
        </function>
        <function name="GetFunction">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="queryTimeoutError"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="ident" def="ScalarLiteral"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="ExprType"/>
          </returnsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="ident" def="ScalarFunctionCall"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="ExprType"/>
          </returnsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="ident" def="ScalarArithExpr"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="ExprType"/>
          </returnsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="ident" def="VectorSelector"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="ExprType"/>
          </returnsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="ident" def="VectorFunctionCall"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="ExprType"/>
          </returnsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="ident" def="VectorAggregation"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="ExprType"/>
          </returnsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="ident" def="VectorArithExpr"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="ExprType"/>
          </returnsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="ident" def="MatrixSelector"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="ExprType"/>
          </returnsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="ident" def="StringLiteral"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="ExprType"/>
          </returnsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="ident" def="StringFunctionCall"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="ExprType"/>
          </returnsList>
        </function>
        <function name="Children">
          <recvList>
            <type type="ident" def="ScalarLiteral"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="Nodes"/>
          </returnsList>
        </function>
        <function name="Children">
          <recvList>
            <type type="ident" def="ScalarFunctionCall"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="Nodes"/>
          </returnsList>
        </function>
        <function name="Children">
          <recvList>
            <type type="ident" def="ScalarArithExpr"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="Nodes"/>
          </returnsList>
        </function>
        <function name="Children">
          <recvList>
            <type type="ident" def="VectorSelector"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="Nodes"/>
          </returnsList>
        </function>
        <function name="Children">
          <recvList>
            <type type="ident" def="VectorFunctionCall"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="Nodes"/>
          </returnsList>
        </function>
        <function name="Children">
          <recvList>
            <type type="ident" def="VectorAggregation"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="Nodes"/>
          </returnsList>
        </function>
        <function name="Children">
          <recvList>
            <type type="ident" def="VectorArithExpr"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="Nodes"/>
          </returnsList>
        </function>
        <function name="Children">
          <recvList>
            <type type="ident" def="MatrixSelector"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="Nodes"/>
          </returnsList>
        </function>
        <function name="Children">
          <recvList>
            <type type="ident" def="StringLiteral"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="Nodes"/>
          </returnsList>
        </function>
        <function name="Children">
          <recvList>
            <type type="ident" def="StringFunctionCall"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="Nodes"/>
          </returnsList>
        </function>
        <function name="Eval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ScalarLiteral"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="SampleValue"/>
            </type>
          </returnsList>
        </function>
        <function name="Eval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ScalarArithExpr"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="SampleValue"/>
            </type>
          </returnsList>
        </function>
        <function name="Eval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ScalarFunctionCall"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="SampleValue"/>
            </type>
          </returnsList>
        </function>
        <function name="EvalVectorInstant">
          <recvList/>
          <paramsList>
            <type type="ident" def="VectorNode"/>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="local"/>
              <item value="Storage"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="stats"/>
                <item value="TimerGroup"/>
              </type>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="Vector"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="EvalVectorRange">
          <recvList/>
          <paramsList>
            <type type="ident" def="VectorNode"/>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="selector">
              <prefix value="local"/>
              <item value="Storage"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="stats"/>
                <item value="TimerGroup"/>
              </type>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="Matrix"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Eval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="VectorAggregation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="Vector"/>
          </returnsList>
        </function>
        <function name="Eval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="VectorSelector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="Vector"/>
          </returnsList>
        </function>
        <function name="Eval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="VectorFunctionCall"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="Vector"/>
          </returnsList>
        </function>
        <function name="Eval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="VectorArithExpr"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="Vector"/>
          </returnsList>
        </function>
        <function name="Eval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MatrixSelector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="Matrix"/>
          </returnsList>
        </function>
        <function name="EvalBoundaries">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MatrixSelector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="Matrix"/>
          </returnsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="Matrix"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="int"/>
          </returnsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="Matrix"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
          </returnsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="Matrix"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Eval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StringLiteral"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="Eval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StringFunctionCall"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="NewScalarLiteral">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="SampleValue"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="ScalarLiteral"/>
            </type>
          </returnsList>
        </function>
        <function name="NewVectorSelector">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="LabelMatchers"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="VectorSelector"/>
            </type>
          </returnsList>
        </function>
        <function name="NewVectorAggregation">
          <recvList/>
          <paramsList>
            <type type="ident" def="AggrType"/>
            <type type="ident" def="VectorNode"/>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelNames"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="VectorAggregation"/>
            </type>
          </returnsList>
        </function>
        <function name="NewFunctionCall">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Function"/>
            </type>
            <type type="ident" def="Nodes"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="Node"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="NewArithExpr">
          <recvList/>
          <paramsList>
            <type type="ident" def="BinOpType"/>
            <type type="ident" def="Node"/>
            <type type="ident" def="Node"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="Node"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="NewMatrixSelector">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="VectorSelector"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="MatrixSelector"/>
            </type>
          </returnsList>
        </function>
        <function name="NewStringLiteral">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="StringLiteral"/>
            </type>
          </returnsList>
        </function>
      </functions>
      <names>
        <name value="Text"/>
        <name value="JSON"/>
        <name value="ScalarType"/>
        <name value="VectorType"/>
        <name value="MatrixType"/>
        <name value="StringType"/>
        <name value="Add"/>
        <name value="Sub"/>
        <name value="Mul"/>
        <name value="Div"/>
        <name value="Mod"/>
        <name value="NE"/>
        <name value="EQ"/>
        <name value="GT"/>
        <name value="LT"/>
        <name value="GE"/>
        <name value="LE"/>
        <name value="And"/>
        <name value="Or"/>
        <name value="Sum"/>
        <name value="Avg"/>
        <name value="Min"/>
        <name value="Max"/>
        <name value="Count"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/templates">
      <types/>
      <functions>
        <function name="Len">
          <recvList>
            <type type="ident" def="queryResultByLabelSorter"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="int"/>
          </returnsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="queryResultByLabelSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
          </returnsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="queryResultByLabelSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="NewTemplateExpander">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="interface"/>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="local"/>
              <item value="Storage"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="templateExpander"/>
            </type>
          </returnsList>
        </function>
        <function name="Expand">
          <recvList>
            <type type="ident" def="templateExpander"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="ExpandHTML">
          <recvList>
            <type type="ident" def="templateExpander"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/config">
      <types>
        <type type="struct" name="Config">
          <field type="selector" name="">
            <prefix value="pb"/>
            <item value="PrometheusConfig"/>
          </field>
        </type>
        <type type="struct" name="JobConfig">
          <field type="selector" name="">
            <prefix value="pb"/>
            <item value="JobConfig"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="LoadFromString">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="Config"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="LoadFromFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="Config"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Config"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="Validate">
          <recvList>
            <type type="ident" def="Config"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="GetJobByName">
          <recvList>
            <type type="ident" def="Config"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="JobConfig"/>
            </type>
          </returnsList>
        </function>
        <function name="GlobalLabels">
          <recvList>
            <type type="ident" def="Config"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </type>
          </returnsList>
        </function>
        <function name="Jobs">
          <recvList>
            <type type="ident" def="Config"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="JobConfig"/>
            </type>
          </returnsList>
        </function>
        <function name="ScrapeInterval">
          <recvList>
            <type type="ident" def="Config"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </returnsList>
        </function>
        <function name="EvaluationInterval">
          <recvList>
            <type type="ident" def="Config"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </returnsList>
        </function>
        <function name="ScrapeInterval">
          <recvList>
            <type type="ident" def="JobConfig"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </returnsList>
        </function>
        <function name="ScrapeTimeout">
          <recvList>
            <type type="ident" def="JobConfig"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </returnsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/notification">
      <types>
        <type type="struct" name="NotificationReq">
          <field type="ident" def="string" name="Summary"/>
          <field type="ident" def="string" name="Description"/>
          <field type="selector" name="Labels">
            <prefix value="clientmodel"/>
            <item value="LabelSet"/>
          </field>
          <field type="selector" name="Value">
            <prefix value="clientmodel"/>
            <item value="SampleValue"/>
          </field>
          <field type="selector" name="ActiveSince">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="string" name="RuleString"/>
          <field type="ident" def="string" name="GeneratorURL"/>
        </type>
        <type name="NotificationReqs" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="NotificationReq"/>
          </elmtype>
        </type>
        <type type="struct" name="NotificationHandler">
          <field type="ident" def="string" name="alertmanagerURL"/>
          <field type="chan" dir="3" name="pendingNotifications">
            <type type="ident" def="NotificationReqs"/>
          </field>
          <field type="ident" def="httpPoster" name="httpClient"/>
          <field type="selector" name="notificationLatency">
            <prefix value="prometheus"/>
            <item value="Summary"/>
          </field>
          <field type="selector" name="notificationErrors">
            <prefix value="prometheus"/>
            <item value="Counter"/>
          </field>
          <field type="selector" name="notificationDropped">
            <prefix value="prometheus"/>
            <item value="Counter"/>
          </field>
          <field type="selector" name="notificationsQueueLength">
            <prefix value="prometheus"/>
            <item value="Gauge"/>
          </field>
          <field type="selector" name="notificationsQueueCapacity">
            <prefix value="prometheus"/>
            <item value="Metric"/>
          </field>
          <field type="chan" dir="3" name="stopped">
            <type type="struct" name=""/>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewNotificationHandler">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="NotificationHandler"/>
            </type>
          </returnsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NotificationHandler"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="SubmitReqs">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NotificationHandler"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="NotificationReqs"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NotificationHandler"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NotificationHandler"/>
            </type>
          </recvList>
          <paramsList>
            <type type="chan" dir="1">
              <type type="pointer">
                <type type="selector">
                  <prefix value="prometheus"/>
                  <item value="Desc"/>
                </type>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NotificationHandler"/>
            </type>
          </recvList>
          <paramsList>
            <type type="chan" dir="1">
              <type type="selector">
                <prefix value="prometheus"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/utility">
      <types>
        <type name="InstantProvider" type="interface">
          <method name="Now">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="time"/>
                <item value="Time"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Time">
          <field type="ident" def="InstantProvider" name="Provider"/>
        </type>
        <type name="Set" type="map">
          <keytype type="interface"/>
          <type type="struct" name=""/>
        </type>
      </types>
      <functions>
        <function name="Now">
          <recvList>
            <type type="ident" def="Time"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </returnsList>
        </function>
        <function name="DurationToString">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="StringToDuration">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="ident" def="Set"/>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Remove">
          <recvList>
            <type type="ident" def="Set"/>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Elements">
          <recvList>
            <type type="ident" def="Set"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
          </returnsList>
        </function>
        <function name="Has">
          <recvList>
            <type type="ident" def="Set"/>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
          </returnsList>
        </function>
        <function name="Intersection">
          <recvList>
            <type type="ident" def="Set"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Set"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="Set"/>
          </returnsList>
        </function>
        <function name="NewDeadlineClient">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Client"/>
              </type>
            </type>
          </returnsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/retrieval">
      <types>
        <type type="struct" name="TargetPool">
          <field type="selector" name="">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="ident" def="TargetManager" name="manager"/>
          <field type="map" name="targetsByURL">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="Target"/>
          </field>
          <field type="selector" name="interval">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="ingester">
            <prefix value="extraction"/>
            <item value="Ingester"/>
          </field>
          <field type="chan" dir="3" name="addTargetQueue">
            <type type="ident" def="Target"/>
          </field>
          <field type="ident" def="TargetProvider" name="targetProvider"/>
          <field type="chan" dir="3" name="stopping">
            <type type="struct" name=""/>
          </field>
          <field type="chan" dir="3" name="stopped">
            <type type="struct" name=""/>
          </field>
        </type>
        <type name="TargetManager" type="interface">
          <method name="AddTarget">
            <paramsList>
              <type type="selector">
                <prefix value="config"/>
                <item value="JobConfig"/>
              </type>
              <type type="ident" def="Target"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="ReplaceTargets">
            <paramsList>
              <type type="selector">
                <prefix value="config"/>
                <item value="JobConfig"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="Target"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Remove">
            <paramsList>
              <type type="ident" def="Target"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AddTargetsFromConfig">
            <paramsList>
              <type type="selector">
                <prefix value="config"/>
                <item value="Config"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Stop">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Pools">
            <paramsList/>
            <resultsList>
              <type type="map">
                <keytype type="ident" def="string"/>
                <valtype type="pointer">
                  <type type="ident" def="TargetPool"/>
                </valtype>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="TargetProvider" type="interface">
          <method name="Targets">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="Target"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="TargetState" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type name="Target" type="interface">
          <method name="LastError">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="State">
            <paramsList/>
            <resultsList>
              <type type="ident" def="TargetState"/>
            </resultsList>
          </method>
          <method name="LastScrape">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="time"/>
                <item value="Time"/>
              </type>
            </resultsList>
          </method>
          <method name="URL">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="GlobalURL">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="BaseLabels">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="LabelSet"/>
              </type>
            </resultsList>
          </method>
          <method name="SetBaseLabelsFrom">
            <paramsList>
              <type type="ident" def="Target"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="RunScraper">
            <paramsList>
              <type type="selector">
                <prefix value="extraction"/>
                <item value="Ingester"/>
              </type>
              <type type="selector">
                <prefix value="time"/>
                <item value="Duration"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="StopScraper">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="MergeLabelsIngester">
          <field type="selector" name="Labels">
            <prefix value="clientmodel"/>
            <item value="LabelSet"/>
          </field>
          <field type="selector" name="CollisionPrefix">
            <prefix value="clientmodel"/>
            <item value="LabelName"/>
          </field>
          <field type="selector" name="Ingester">
            <prefix value="extraction"/>
            <item value="Ingester"/>
          </field>
        </type>
        <type name="ChannelIngester" type="chan" dir="1">
          <type type="selector">
            <prefix value="clientmodel"/>
            <item value="Samples"/>
          </type>
        </type>
      </types>
      <functions>
        <function name="NewTargetPool">
          <recvList/>
          <paramsList>
            <type type="ident" def="TargetManager"/>
            <type type="ident" def="TargetProvider"/>
            <type type="selector">
              <prefix value="extraction"/>
              <item value="Ingester"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="TargetPool"/>
            </type>
          </returnsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetPool"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetPool"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="AddTarget">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetPool"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Target"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="ReplaceTargets">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetPool"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="Target"/>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="targetsByURL"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="int"/>
          </returnsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="targetsByURL"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="targetsByURL"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
          </returnsList>
        </function>
        <function name="Targets">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetPool"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="Target"/>
            </type>
          </returnsList>
        </function>
        <function name="NewTargetManager">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="extraction"/>
              <item value="Ingester"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="TargetManager"/>
          </returnsList>
        </function>
        <function name="AddTarget">
          <recvList>
            <type type="pointer">
              <type type="ident" def="targetManager"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="config"/>
              <item value="JobConfig"/>
            </type>
            <type type="ident" def="Target"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="ReplaceTargets">
          <recvList>
            <type type="pointer">
              <type type="ident" def="targetManager"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="config"/>
              <item value="JobConfig"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="Target"/>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Remove">
          <recvList>
            <type type="pointer">
              <type type="ident" def="targetManager"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Target"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="AddTargetsFromConfig">
          <recvList>
            <type type="pointer">
              <type type="ident" def="targetManager"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="config"/>
              <item value="Config"/>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="targetManager"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="Pools">
          <recvList>
            <type type="pointer">
              <type type="ident" def="targetManager"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="pointer">
                <type type="ident" def="TargetPool"/>
              </valtype>
            </type>
          </returnsList>
        </function>
        <function name="NewSdTargetProvider">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="config"/>
              <item value="JobConfig"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="sdTargetProvider"/>
            </type>
          </returnsList>
        </function>
        <function name="Targets">
          <recvList>
            <type type="pointer">
              <type type="ident" def="sdTargetProvider"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="Target"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="TargetState"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="NewTarget">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="Target"/>
          </returnsList>
        </function>
        <function name="RunScraper">
          <recvList>
            <type type="pointer">
              <type type="ident" def="target"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="extraction"/>
              <item value="Ingester"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="StopScraper">
          <recvList>
            <type type="pointer">
              <type type="ident" def="target"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="LastError">
          <recvList>
            <type type="pointer">
              <type type="ident" def="target"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="State">
          <recvList>
            <type type="pointer">
              <type type="ident" def="target"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="TargetState"/>
          </returnsList>
        </function>
        <function name="LastScrape">
          <recvList>
            <type type="pointer">
              <type type="ident" def="target"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </returnsList>
        </function>
        <function name="URL">
          <recvList>
            <type type="pointer">
              <type type="ident" def="target"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="GlobalURL">
          <recvList>
            <type type="pointer">
              <type type="ident" def="target"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="BaseLabels">
          <recvList>
            <type type="pointer">
              <type type="ident" def="target"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </type>
          </returnsList>
        </function>
        <function name="SetBaseLabelsFrom">
          <recvList>
            <type type="pointer">
              <type type="ident" def="target"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Target"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Ingest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MergeLabelsIngester"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Samples"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Ingest">
          <recvList>
            <type type="ident" def="ChannelIngester"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Samples"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
      </functions>
      <names>
        <name value="InstanceLabel"/>
        <name value="Unknown"/>
        <name value="Alive"/>
        <name value="Unreachable"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/storage/metric">
      <types>
        <type type="struct" name="SamplePair">
          <field type="selector" name="Timestamp">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
          <field type="selector" name="Value">
            <prefix value="clientmodel"/>
            <item value="SampleValue"/>
          </field>
        </type>
        <type name="Values" type="slice">
          <elmtype type="ident" def="SamplePair"/>
        </type>
        <type type="struct" name="Interval">
          <field type="selector" name="OldestInclusive">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
          <field type="selector" name="NewestInclusive">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
        </type>
        <type name="MatchType" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type name="LabelMatchers" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="LabelMatcher"/>
          </elmtype>
        </type>
        <type type="struct" name="LabelMatcher">
          <field type="ident" def="MatchType" name="Type"/>
          <field type="selector" name="Name">
            <prefix value="clientmodel"/>
            <item value="LabelName"/>
          </field>
          <field type="selector" name="Value">
            <prefix value="clientmodel"/>
            <item value="LabelValue"/>
          </field>
          <field type="pointer" name="re">
            <type type="selector">
              <prefix value="regexp"/>
              <item value="Regexp"/>
            </type>
          </field>
        </type>
        <type type="struct" name="LabelPair">
          <field type="selector" name="Name">
            <prefix value="clientmodel"/>
            <item value="LabelName"/>
          </field>
          <field type="selector" name="Value">
            <prefix value="clientmodel"/>
            <item value="LabelValue"/>
          </field>
        </type>
        <type name="LabelPairs" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="LabelPair"/>
          </elmtype>
        </type>
      </types>
      <functions>
        <function name="MarshalJSON">
          <recvList>
            <type type="ident" def="SamplePair"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Equal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SamplePair"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="SamplePair"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SamplePair"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="MatchType"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="NewLabelMatcher">
          <recvList/>
          <paramsList>
            <type type="ident" def="MatchType"/>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelName"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelValue"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="LabelMatcher"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelValue"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
          </returnsList>
        </function>
        <function name="Filter">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelValues"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelValues"/>
            </type>
          </returnsList>
        </function>
        <function name="Equal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
          </returnsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="LabelPairs"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="int"/>
          </returnsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="LabelPairs"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
          </returnsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="LabelPairs"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList/>
        </function>
      </functions>
      <names>
        <name value="Equal"/>
        <name value="NotEqual"/>
        <name value="RegexMatch"/>
        <name value="RegexNoMatch"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/storage/remote/opentsdb">
      <types>
        <type name="TagValue" type="selector">
          <prefix value="clientmodel"/>
          <item value="LabelValue"/>
        </type>
        <type type="struct" name="Client">
          <field type="ident" def="string" name="url"/>
          <field type="pointer" name="httpClient">
            <type type="selector">
              <prefix value="http"/>
              <item value="Client"/>
            </type>
          </field>
        </type>
        <type type="struct" name="StoreSamplesRequest">
          <field type="ident" def="TagValue" name="Metric"/>
          <field type="ident" def="int64" name="Timestamp"/>
          <field type="ident" def="float64" name="Value"/>
          <field type="map" name="Tags">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="TagValue"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="MarshalJSON">
          <recvList>
            <type type="ident" def="TagValue"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TagValue"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="NewClient">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </returnsList>
        </function>
        <function name="Store">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Samples"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/config/generated">
      <types>
        <type type="struct" name="LabelPair">
          <field type="pointer" name="Name">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Value">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="LabelPairs">
          <field type="slice" name="Label">
            <elmtype type="pointer">
              <type type="ident" def="LabelPair"/>
            </elmtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GlobalConfig">
          <field type="pointer" name="ScrapeInterval">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="EvaluationInterval">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Labels">
            <type type="ident" def="LabelPairs"/>
          </field>
          <field type="slice" name="RuleFile">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="TargetGroup">
          <field type="slice" name="Target">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="pointer" name="Labels">
            <type type="ident" def="LabelPairs"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="JobConfig">
          <field type="pointer" name="Name">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="ScrapeInterval">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="ScrapeTimeout">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="SdName">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="SdRefreshInterval">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="TargetGroup">
            <elmtype type="pointer">
              <type type="ident" def="TargetGroup"/>
            </elmtype>
          </field>
          <field type="pointer" name="MetricsPath">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="PrometheusConfig">
          <field type="pointer" name="Global">
            <type type="ident" def="GlobalConfig"/>
          </field>
          <field type="slice" name="Job">
            <elmtype type="pointer">
              <type type="ident" def="JobConfig"/>
            </elmtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="GetName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="GetValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPairs"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPairs"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="GetLabel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPairs"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="LabelPair"/>
              </elmtype>
            </type>
          </returnsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GlobalConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GlobalConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="GetScrapeInterval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GlobalConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="GetEvaluationInterval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GlobalConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="GetLabels">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GlobalConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="LabelPairs"/>
            </type>
          </returnsList>
        </function>
        <function name="GetRuleFile">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GlobalConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </returnsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="GetTarget">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </returnsList>
        </function>
        <function name="GetLabels">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="LabelPairs"/>
            </type>
          </returnsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JobConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JobConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="GetName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JobConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="GetScrapeInterval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JobConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="GetScrapeTimeout">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JobConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="GetSdName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JobConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="GetSdRefreshInterval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JobConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="GetTargetGroup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JobConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="TargetGroup"/>
              </elmtype>
            </type>
          </returnsList>
        </function>
        <function name="GetMetricsPath">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JobConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PrometheusConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PrometheusConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="GetGlobal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PrometheusConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="GlobalConfig"/>
            </type>
          </returnsList>
        </function>
        <function name="GetJob">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PrometheusConfig"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="JobConfig"/>
              </elmtype>
            </type>
          </returnsList>
        </function>
      </functions>
      <names>
        <name value="Default_GlobalConfig_ScrapeInterval"/>
        <name value="Default_GlobalConfig_EvaluationInterval"/>
        <name value="Default_JobConfig_ScrapeTimeout"/>
        <name value="Default_JobConfig_SdRefreshInterval"/>
        <name value="Default_JobConfig_MetricsPath"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/stats">
      <types>
        <type type="struct" name="Timer">
          <field type="selector" name="name">
            <prefix value="fmt"/>
            <item value="Stringer"/>
          </field>
          <field type="selector" name="created">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="selector" name="start">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="selector" name="duration">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
        </type>
        <type type="struct" name="TimerGroup">
          <field type="map" name="timers">
            <keytype type="selector">
              <prefix value="fmt"/>
              <item value="Stringer"/>
            </keytype>
            <valtype type="pointer">
              <type type="ident" def="Timer"/>
            </valtype>
          </field>
          <field type="pointer" name="child">
            <type type="ident" def="TimerGroup"/>
          </field>
        </type>
        <type name="Timers" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="Timer"/>
          </elmtype>
        </type>
        <type name="QueryTiming" type="ident">
          <type type="ident" def="int"/>
        </type>
      </types>
      <functions>
        <function name="Start">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Timer"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="Timer"/>
            </type>
          </returnsList>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Timer"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="ElapsedTime">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Timer"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Timer"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="NewTimerGroup">
          <recvList/>
          <paramsList/>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="TimerGroup"/>
            </type>
          </returnsList>
        </function>
        <function name="GetTimer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TimerGroup"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="fmt"/>
              <item value="Stringer"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="pointer">
              <type type="ident" def="Timer"/>
            </type>
          </returnsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="Timers"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="int"/>
          </returnsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="Timers"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byCreationTimeSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <returnsList>
            <type type="ident" def="bool"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TimerGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="QueryTiming"/>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="string"/>
          </returnsList>
        </function>
      </functions>
      <names>
        <name value="TotalEvalTime"/>
        <name value="ResultSortTime"/>
        <name value="JSONEncodeTime"/>
        <name value="PreloadTime"/>
        <name value="TotalQueryPreparationTime"/>
        <name value="InnerViewBuildingTime"/>
        <name value="InnerEvalTime"/>
        <name value="ResultAppendTime"/>
        <name value="QueryAnalysisTime"/>
        <name value="GetValueAtTimeTime"/>
        <name value="GetBoundaryValuesTime"/>
        <name value="GetRangeValuesTime"/>
        <name value="ViewQueueTime"/>
        <name value="ViewDiskPreparationTime"/>
        <name value="ViewDataExtractionTime"/>
        <name value="ViewDiskExtractionTime"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/storage/local">
      <types>
        <type type="struct" name="MemorySeriesStorageOptions">
          <field type="ident" def="int" name="MemoryChunks"/>
          <field type="ident" def="string" name="PersistenceStoragePath"/>
          <field type="selector" name="PersistenceRetentionPeriod">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="int" name="PersistenceQueueCapacity"/>
          <field type="selector" name="CheckpointInterval">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="int" name="CheckpointDirtySeriesLimit"/>
          <field type="ident" def="bool" name="Dirty"/>
        </type>
        <type name="Storage" type="interface">
          <method name="AppendSamples">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Samples"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="NewPreloader">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Preloader"/>
            </resultsList>
          </method>
          <method name="GetFingerprintsForLabelMatchers">
            <paramsList>
              <type type="selector">
                <prefix value="metric"/>
                <item value="LabelMatchers"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Fingerprints"/>
              </type>
            </resultsList>
          </method>
          <method name="GetLabelValuesForLabelName">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="LabelName"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="LabelValues"/>
              </type>
            </resultsList>
          </method>
          <method name="GetMetricForFingerprint">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Fingerprint"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="COWMetric"/>
              </type>
            </resultsList>
          </method>
          <method name="NewIterator">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Fingerprint"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="SeriesIterator"/>
            </resultsList>
          </method>
          <method name="Start">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Stop">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="WaitForIndexing">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type name="SeriesIterator" type="interface">
          <method name="GetValueAtTime">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Timestamp"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="metric"/>
                <item value="Values"/>
              </type>
            </resultsList>
          </method>
          <method name="GetBoundaryValues">
            <paramsList>
              <type type="selector">
                <prefix value="metric"/>
                <item value="Interval"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="metric"/>
                <item value="Values"/>
              </type>
            </resultsList>
          </method>
          <method name="GetRangeValues">
            <paramsList>
              <type type="selector">
                <prefix value="metric"/>
                <item value="Interval"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="metric"/>
                <item value="Values"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="Preloader" type="interface">
          <method name="PreloadRange">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Fingerprint"/>
              </type>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Timestamp"/>
              </type>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Timestamp"/>
              </type>
              <type type="selector">
                <prefix value="time"/>
                <item value="Duration"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Close">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
      </types>
      <functions>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="testStorageCloser"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="NewTestStorage">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="test"/>
              <item value="T"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="Storage"/>
            <type type="selector">
              <prefix value="test"/>
              <item value="Closer"/>
            </type>
          </returnsList>
        </function>
        <function name="NewMemorySeriesStorage">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="MemorySeriesStorageOptions"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="Storage"/>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Start">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="WaitForIndexing">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="NewIterator">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="SeriesIterator"/>
          </returnsList>
        </function>
        <function name="NewPreloader">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="ident" def="Preloader"/>
          </returnsList>
        </function>
        <function name="GetFingerprintsForLabelMatchers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="LabelMatchers"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprints"/>
            </type>
          </returnsList>
        </function>
        <function name="GetLabelValuesForLabelName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelName"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelValues"/>
            </type>
          </returnsList>
        </function>
        <function name="GetMetricForFingerprint">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="COWMetric"/>
            </type>
          </returnsList>
        </function>
        <function name="AppendSamples">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Samples"/>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="chan" dir="1">
              <type type="pointer">
                <type type="selector">
                  <prefix value="prometheus"/>
                  <item value="Desc"/>
                </type>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="chan" dir="1">
              <type type="selector">
                <prefix value="prometheus"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="GetValueAtTime">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Values"/>
            </type>
          </returnsList>
        </function>
        <function name="GetBoundaryValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Interval"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Values"/>
            </type>
          </returnsList>
        </function>
        <function name="GetRangeValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Interval"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Values"/>
            </type>
          </returnsList>
        </function>
        <function name="GetValueAtTime">
          <recvList>
            <type type="ident" def="nopSeriesIterator"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Values"/>
            </type>
          </returnsList>
        </function>
        <function name="GetBoundaryValues">
          <recvList>
            <type type="ident" def="nopSeriesIterator"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Interval"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Values"/>
            </type>
          </returnsList>
        </function>
        <function name="GetRangeValues">
          <recvList>
            <type type="ident" def="nopSeriesIterator"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Interval"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Values"/>
            </type>
          </returnsList>
        </function>
        <function name="PreloadRange">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesPreloader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesPreloader"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="persistence"/>
            </type>
          </recvList>
          <paramsList>
            <type type="chan" dir="1">
              <type type="pointer">
                <type type="selector">
                  <prefix value="prometheus"/>
                  <item value="Desc"/>
                </type>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="persistence"/>
            </type>
          </recvList>
          <paramsList>
            <type type="chan" dir="1">
              <type type="selector">
                <prefix value="prometheus"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Lock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fingerprintLocker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Unlock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fingerprintLocker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </type>
          </paramsList>
          <returnsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/web/api">
      <types>
        <type type="struct" name="TargetGroup">
          <field type="slice" name="Endpoints">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="map" name="BaseLabels">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="MetricsService">
          <field type="selector" name="time">
            <prefix value="utility"/>
            <item value="Time"/>
          </field>
          <field type="pointer" name="Config">
            <type type="selector">
              <prefix value="config"/>
              <item value="Config"/>
            </type>
          </field>
          <field type="selector" name="TargetManager">
            <prefix value="retrieval"/>
            <item value="TargetManager"/>
          </field>
          <field type="selector" name="Storage">
            <prefix value="local"/>
            <item value="Storage"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="SetTargets">
          <recvList>
            <type type="ident" def="MetricsService"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Query">
          <recvList>
            <type type="ident" def="MetricsService"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="QueryRange">
          <recvList>
            <type type="ident" def="MetricsService"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="Metrics">
          <recvList>
            <type type="ident" def="MetricsService"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <returnsList/>
        </function>
        <function name="RegisterHandler">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricsService"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/rules/manager">
      <types>
        <type name="RuleManager" type="interface">
          <method name="AddRulesFromConfig">
            <paramsList>
              <type type="selector">
                <prefix value="config"/>
                <item value="Config"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Run">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Stop">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Rules">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="selector">
                  <prefix value="rules"/>
                  <item value="Rule"/>
                </elmtype>
              </type>
            </resultsList>
          </method>
          <method name="AlertingRules">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="pointer">
                  <type type="selector">
                    <prefix value="rules"/>
                    <item value="AlertingRule"/>
                  </type>
                </elmtype>
              </type>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="RuleManagerOptions">
          <field type="selector" name="EvaluationInterval">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="Storage">
            <prefix value="local"/>
            <item value="Storage"/>
          </field>
          <field type="pointer" name="NotificationHandler">
            <type type="selector">
              <prefix value="notification"/>
              <item value="NotificationHandler"/>
            </type>
          </field>
          <field type="chan" dir="1" name="Results">
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Samples"/>
            </type>
          </field>
          <field type="ident" def="string" name="PrometheusURL"/>
        </type>
      </types>
      <functions>
        <function name="NewRuleManager">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="RuleManagerOptions"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="RuleManager"/>
          </returnsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ruleManager"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ruleManager"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList/>
        </function>
        <function name="AddRulesFromConfig">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ruleManager"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="config"/>
              <item value="Config"/>
            </type>
          </paramsList>
          <returnsList>
            <type type="ident" def="error"/>
          </returnsList>
        </function>
        <function name="Rules">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ruleManager"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="rules"/>
                <item value="Rule"/>
              </elmtype>
            </type>
          </returnsList>
        </function>
        <function name="AlertingRules">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ruleManager"/>
            </type>
          </recvList>
          <paramsList/>
          <returnsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="rules"/>
                  <item value="AlertingRule"/>
                </type>
              </elmtype>
            </type>
          </returnsList>
        </function>
      </functions>
      <names/>
    </package>
  </packages>
  <imports>
    <import path="flag"/>
    <import path="net/http/pprof"/>
    <import path="os"/>
    <import path="os/signal"/>
    <import path="sync"/>
    <import path="syscall"/>
    <import path="time"/>
    <import path="github.com/golang/glog"/>
    <import path="github.com/prometheus/client_golang/model"/>
    <import path="github.com/prometheus/client_golang/prometheus"/>
    <import path="github.com/prometheus/prometheus/config"/>
    <import path="github.com/prometheus/prometheus/notification"/>
    <import path="github.com/prometheus/prometheus/retrieval"/>
    <import path="github.com/prometheus/prometheus/rules/manager"/>
    <import path="github.com/prometheus/prometheus/storage/local"/>
    <import path="github.com/prometheus/prometheus/storage/remote"/>
    <import path="github.com/prometheus/prometheus/storage/remote/opentsdb"/>
    <import path="github.com/prometheus/prometheus/web"/>
    <import path="github.com/prometheus/prometheus/web/api"/>
    <import path="text/template"/>
    <import path="fmt"/>
    <import path="html/template"/>
    <import path="io/ioutil"/>
    <import path="net"/>
    <import path="net/http"/>
    <import path="runtime/pprof"/>
    <import path="github.com/prometheus/prometheus/web/blob"/>
    <import path="io"/>
    <import path="net/url"/>
    <import path="path/filepath"/>
    <import path="github.com/prometheus/prometheus/templates"/>
    <import path="sort"/>
    <import path="github.com/prometheus/prometheus/rules"/>
    <import path="compress/gzip"/>
    <import path="compress/zlib"/>
    <import path="strings"/>
    <import path="bytes"/>
    <import path="encoding/json"/>
    <import path="github.com/prometheus/prometheus/web/httputils"/>
    <import path="errors"/>
    <import path="strconv"/>
    <import path="github.com/prometheus/prometheus/rules/ast"/>
    <import path="github.com/prometheus/prometheus/stats"/>
    <import path="github.com/prometheus/prometheus/utility"/>
    <import path="regexp"/>
    <import path="testing"/>
    <import path="testing/quick"/>
    <import path="math"/>
    <import path="reflect"/>
    <import path="github.com/prometheus/prometheus/utility/test"/>
    <import path="math/rand"/>
    <import path="github.com/prometheus/prometheus/storage/metric"/>
    <import path="container/list"/>
    <import path="sync/atomic"/>
    <import path="github.com/prometheus/prometheus/storage/local/codable"/>
    <import path="github.com/prometheus/prometheus/storage/local/index"/>
    <import path="bufio"/>
    <import path="encoding/binary"/>
    <import path="path"/>
    <import path="github.com/prometheus/prometheus/storage/local/flock"/>
    <import path="encoding"/>
    <import path="github.com/syndtr/goleveldb/leveldb"/>
    <import path="github.com/syndtr/goleveldb/leveldb/filter"/>
    <import path="github.com/syndtr/goleveldb/leveldb/iterator"/>
    <import path="github.com/syndtr/goleveldb/leveldb/opt"/>
    <import path="github.com/syndtr/goleveldb/leveldb/util"/>
    <import path="container/heap"/>
    <import path="hash/fnv"/>
    <import path="github.com/prometheus/client_golang/extraction"/>
    <import path="code.google.com/p/goprotobuf/proto"/>
    <import path="github.com/prometheus/prometheus/config/generated"/>
    <import path="net/http/httptest"/>
    <import path="github.com/miekg/dns"/>
  </imports>
</project>
